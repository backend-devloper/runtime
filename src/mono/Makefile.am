AUTOMAKE_OPTIONS = foreign
ACLOCAL_AMFLAGS = -I .

SUBDIRS = $(libgc_dir) mono $(ikvm_native_dir) support docs data runtime scripts man samples web 

# Keep in sync with SUBDIRS
## 'tools' is not normally built
DIST_SUBDIRS = libgc mono ikvm-native support docs data runtime scripts man samples web tools 

vs_files = genmdesc.vcproj libmono.vcproj mono.vcproj mono.sln

EXTRA_DIST= mono.pc.in mint.pc.in mono-uninstalled.pc.in dotnet.pc.in mono-cairo.pc.in $(vs_files)

DISTCHECK_CONFIGURE_FLAGS = EXTERNAL_MCS=false EXTERNAL_RUNTIME=false

# Distribute the 'mcs' tree too
dist-hook:
	test -d $(distdir)/mcs || mkdir $(distdir)/mcs
	d=`cd $(distdir)/mcs && pwd`; cd $(mcs_topdir) && $(MAKE) PROFILE=default distdir=$$d dist-recursive

pkgconfigdir = $(libdir)/pkgconfig
if JIT_SUPPORTED
if INTERP_SUPPORTED
pkgconfig_DATA= mono.pc mint.pc dotnet.pc mono-cairo.pc
else
pkgconfig_DATA= mono.pc dotnet.pc mono-cairo.pc
endif
else
pkgconfig_DATA= mint.pc mono-cairo.pc
endif
noinst_DATA = mono-uninstalled.pc
DISTCLEANFILES= mono.pc mint.pc mono-uninstalled.pc dotnet.pc mono-cairo.pc

.PHONY: get-monolite-latest mcs-do-compiler-tests compiler-tests bootstrap-world

# building with monolite
mcslib = $(mcs_topdir)/class/lib
monolite = $(mcslib)/monolite
get-monolite-latest:
	-rm -fr $(mcslib)/monolite-*
	test ! -d $(monolite) || test ! -d $(monolite).old || rm -fr $(monolite).old
	test ! -d $(monolite) || mv -f $(monolite) $(monolite).old
	cd $(mcslib) && { wget -O- http://www.go-mono.com/daily/monolite-latest.tar.gz | gzip -d | tar xf - ; }
	cd $(mcslib) && mv -f monolite-* monolite

compiler-tests: mcs-do-clean
	$(MAKE) all
	$(MAKE) mcs-do-compiler-tests

compiler-tests-net_2_0:
	-rm -f $(mcs_topdir)/build/common/Consts.cs.save
	-mv -f $(mcs_topdir)/build/common/Consts.cs $(mcs_topdir)/build/common/Consts.cs.save
	cd $(mcs_topdir) && $(MAKE) PROFILE=net_2_0_bootstrap clean
	cd $(mcs_topdir) && $(MAKE) PROFILE=net_2_0 clean
	-mv -f $(mcs_topdir)/build/common/Consts.cs.save $(mcs_topdir)/build/common/Consts.cs
	$(MAKE) all
	$(MAKE) build_profiles=net_2_0 mcs-do-compiler-tests

bootstrap-world: compiler-tests
	$(MAKE) install

bootstrap-world-net_2_0: compiler-tests-net_2_0
	$(MAKE) install

# internal targets
mcs-do-clean:
	cd runtime && $(MAKE) clean-local
mcs-do-compiler-tests:
	cd runtime && $(MAKE) test_select='TEST_SUBDIRS="tests errors"' check-local

win32getdeps:
	wget http://www.go-mono.com/archive/pkgconfig-0.11-20020310.zip
	wget http://www.go-mono.com/archive/glib-2.0.4-20020703.zip 
	wget http://www.go-mono.com/archive/glib-dev-2.0.4-20020703.zip 
	wget http://www.go-mono.com/archive/libiconv-1.7.zip 
	wget http://www.go-mono.com/archive/libiconv-dev-1.7.zip 
	wget http://www.go-mono.com/archive/libintl-0.10.40-20020101.zip
	unzip -n -d / pkgconfig-0.11-20020310.zip
	unzip -n -d / glib-2.0.4-20020703.zip
	unzip -n -d / glib-dev-2.0.4-20020703.zip
	unzip -n -d / libiconv-1.7.zip
	unzip -n -d / libiconv-dev-1.7.zip
	unzip -n -d / libintl-0.10.40-20020101.zip

win32setup:
	makensis /DMILESTONE=$(VERSION) /DSOURCE_INSTALL_DIR=$(SOURCE_INSTALL_DIR) /DBUILDNUM=$(BUILDNUM) monowiz.win32.nsi

bootstrap: all
	@echo "*** 'make bootstrap' is obsolete.  Just run 'make' to perform a combined mono+mcs build"
	exit 1
