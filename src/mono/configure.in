AC_INIT(README)
AC_CANONICAL_SYSTEM

# Gross hack to enable 'make dist' on automake 1.9+tar 1.14.
# The extra brackets are to foil regex-based scans.
m4_ifdef([_A][M_PROG_TAR],[_A][M_SET_OPTION([tar-ustar])])

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(mono,1.1.6.5)
AM_MAINTAINER_MODE

AC_PROG_LN_S

# In case of cygwin, override LN_S, irrespective of what it determines.
# The build uses cygwin, but the actual runtime doesn't.
case $host_os in
*cygwin* ) LN_S='cp -p';;
esac


dnl
dnl libgc checks
dnl

gc_headers=no
gc=included
use_included_gc=no

if test -d $srcdir/libgc ; then
  gc_default=included
else
  gc_default=boehm
fi

#
# These are the flags that need to be stored in the mono.pc file for 
# compiling code that will embed Mono
#
libmono_cflags=""
libmono_ldflags=""
AC_SUBST(libmono_cflags)
AC_SUBST(libmono_ldflags)

dnl if linker handles the version script
no_version_script=no

# Set to yes if Unix sockets cannot be created in an anonymous namespace
need_link_unlink=no

# Thread configuration inspired by sleepycat's db
AC_MSG_CHECKING([host platform characteristics])
libgc_threads=no
case "$host" in
	*-*-mingw*|*-*-cygwin*)
		platform_win32=yes
		AC_DEFINE(PLATFORM_WIN32,1,[Platform is Win32])
		CC="gcc -mno-cygwin -g"
		HOST_CC="gcc"
		# So libgc configure gets -mno-cygwin
		export CC
# latest libgc already defines GC_WIN32_THREADS
#		CPPFLAGS="$CPPFLAGS -DGC_WIN32_THREADS -DWIN32_THREADS"
		CPPFLAGS="$CPPFLAGS -DWIN32_THREADS -DFD_SETSIZE=1024"
		libdl=
		libgc_threads=win32
		gc_default=included
		with_nptl=default
		with_sigaltstack=no
		LN_S=cp
		;;
	*-*-*netbsd*)
		platform_win32=no
		CPPFLAGS="$CPPFLAGS -D_REENTRANT"
		libmono_cflags="-D_REENTRANT"
		LDFLAGS="$LDFLAGS -pthread"
		libmono_ldflags="-pthread"
		need_link_unlink=yes
		libdl=
		libgc_threads=no
		;;
# these flags will work for all versions of -STABLE
#
	*-*-*freebsd4*)
		platform_win32=no
		if test "x$PTHREAD_CFLAGS" = "x"; then
			CPPFLAGS="$CPPFLAGS -D_THREAD_SAFE -DGC_FREEBSD_THREADS"
			libmono_cflags="-D_THREAD_SAFE"
		else
			CPPFLAGS="$CPPFLAGS $PTHREAD_CFLAGS -DGC_FREEBSD_THREADS"
			libmono_cflags="$PTHREAD_CFLAGS"
		fi
		if test "x$PTHREAD_LIBS" = "x"; then
			LDFLAGS="$LDFLAGS -pthread"
			libmono_ldflags="-pthread"
		else
			LDFLAGS="$LDFLAGS $PTHREAD_LIBS"
			libmono_ldflags="$PTHREAD_LIBS"
		fi
		need_link_unlink=yes
		AC_DEFINE(PTHREAD_POINTER_ID)
		libdl=
		libgc_threads=pthreads
# TLS isn't implemented at all on 4-STABLE
		with_nptl=no
		with_tls=pthread
		;;
	*-*-*freebsd5*)
		platform_win32=no
		if test "x$PTHREAD_CFLAGS" = "x"; then
			CPPFLAGS="$CPPFLAGS -DGC_FREEBSD_THREADS"
			libmono_cflags=
		else
			CPPFLAGS="$CPPFLAGS $PTHREAD_CFLAGS -DGC_FREEBSD_THREADS"
			libmono_cflags="$PTHREAD_CFLAGS"
		fi
		if test "x$PTHREAD_LIBS" = "x"; then
			LDFLAGS="$LDFLAGS -pthread"
			libmono_ldflags="-pthread"
		else
			LDFLAGS="$LDFLAGS $PTHREAD_LIBS"
			libmono_ldflags="$PTHREAD_LIBS"
		fi
		need_link_unlink=yes
		AC_DEFINE(PTHREAD_POINTER_ID)
		libdl=
		with_sigaltstack=yes
		libgc_threads=pthreads
# TLS is only partially implemented on 5-STABLE (compiler support
# but NOT library support)
#
		with_tls=pthread
		;;
	*-*-*freebsd6*)
		platform_win32=no
		if test "x$PTHREAD_CFLAGS" = "x"; then
			CPPFLAGS="$CPPFLAGS -DGC_FREEBSD_THREADS"
			libmono_cflags=
		else
			CPPFLAGS="$CPPFLAGS $PTHREAD_CFLAGS -DGC_FREEBSD_THREADS"
			libmono_cflags="$PTHREAD_CFLAGS"
		fi
		if test "x$PTHREAD_LIBS" = "x"; then
			LDFLAGS="$LDFLAGS -pthread"
			libmono_ldflags="-pthread"
		else
			LDFLAGS="$LDFLAGS $PTHREAD_LIBS"
			libmono_ldflags="$PTHREAD_LIBS"
		fi
		need_link_unlink=yes
		AC_DEFINE(PTHREAD_POINTER_ID)
		libdl=
		libgc_threads=pthreads
		with_sigaltstack=yes
# TLS is only partially implemented on -CURRENT (compiler support
# but NOT library support)
#
		with_tls=pthread
		;;
	*-*-*openbsd*)
		platform_win32=no
		CPPFLAGS="$CPPFLAGS -D_THREAD_SAFE -DGC_FREEBSD_THREADS"
		libmono_cflags="-D_THREAD_SAFE"
		LDFLAGS="$LDFLAGS -pthread"
		libmono_ldflags="-pthread"
		need_link_unlink=yes
		AC_DEFINE(PTHREAD_POINTER_ID)
		libdl=
		libgc_threads=pthreads
		;;
	*-*-linux*)
		platform_win32=no
		CPPFLAGS="$CPPFLAGS -DGC_LINUX_THREADS -D_GNU_SOURCE -D_REENTRANT"
		libmono_cflags="-D_REENTRANT"
		libmono_ldflags="-lpthread"
		libdl="-ldl"
		libgc_threads=pthreads
		;;
        *-*-hpux*)
                platform_win32=no
		CPPFLAGS="$CPPFLAGS -DGC_HPUX_THREADS -D_HPUX_SOURCE -D_XOPEN_SOURCE_EXTENDED -D_REENTRANT"
		CFLAGS="$CFLAGS +ESdbgasm"
		LDFLAGS="$LDFLAGS -z"
		libmono_cflags="-D_REENTRANT"
		libmono_ldflags="-lpthread"
		libgc_threads=pthreads
		need_link_unlink=yes
                ;;
	*-*-solaris*)
		platform_win32=no
		CPPFLAGS="$CPPFLAGS -DGC_SOLARIS_THREADS -DGC_SOLARIS_PTHREADS -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS"
		need_link_unlink=yes
		libmono_cflags="-D_REENTRANT"
		libgc_threads=pthreads
		;;
	*-*-darwin*)
		platform_win32=no
		CPPFLAGS="$CPPFLAGS -no-cpp-precomp -D_THREAD_SAFE -DGC_MACOSX_THREADS"
		libmono_cflags="-D_THREAD_SAFE"
		LDFLAGS="$LDFLAGS -pthread"
		libmono_ldflags="-pthread"
		need_link_unlink=yes
		AC_DEFINE(PTHREAD_POINTER_ID)
		AC_DEFINE(USE_MACH_SEMA)
		no_version_script=yes
		libdl=
		libgc_threads=pthreads
		;;
	*)
		AC_MSG_WARN([*** Please add $host to configure.in checks!])
		platform_win32=no
		libdl="-ldl"
		;;
esac
AC_MSG_RESULT(ok)

if test x$need_link_unlink = xyes; then
   AC_DEFINE(NEED_LINK_UNLINK, 1, [Define if Unix sockets cannot be created in an anonymous namespace])
fi

AM_CONDITIONAL(PLATFORM_WIN32, test x$platform_win32 = xyes)

AC_CHECK_TOOL(CC, gcc, gcc)
AC_PROG_CC
AM_PROG_CC_STDC
AC_PROG_INSTALL
dnl We should use AM_PROG_AS, but it's not available on automake/aclocal 1.4
: ${CCAS='$(CC)'}
# Set ASFLAGS if not already set.
: ${CCASFLAGS='$(CFLAGS)'}
AC_SUBST(CCAS)
AC_SUBST(CCASFLAGS)

AC_CHECK_PROG(BISON, bison,yes,no)
if test "x$BISON" = "xno";
then
	AC_MSG_ERROR([You need to install bison])
fi

dnl may require a specific autoconf version
dnl AC_PROG_CC_FOR_BUILD
dnl CC_FOR_BUILD not automatically detected
CC_FOR_BUILD=$CC
BUILD_EXEEXT=
if test "x$cross_compiling" = "xyes"; then
	CC_FOR_BUILD=cc
	BUILD_EXEEXT=""
fi
AC_SUBST(CC_FOR_BUILD)
AC_SUBST(HOST_CC)
AC_SUBST(BUILD_EXEEXT)

# Set STDC_HEADERS
AC_HEADER_STDC
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL

# Test whenever ld supports -version-script
AC_PROG_LD
AC_PROG_LD_GNU
if test "x$lt_cv_prog_gnu_ld" = "xno"; then
   no_version_script=yes
fi

AM_CONDITIONAL(NO_VERSION_SCRIPT, test x$no_version_script = xyes)

AC_CHECK_HEADERS(sys/filio.h sys/sockio.h netdb.h utime.h semaphore.h sys/un.h linux/rtc.h)

AC_CHECK_HEADER(zlib.h, [have_zlib=yes], [have_zlib=no])

AM_CONDITIONAL(HAVE_ZLIB, test x$have_zlib = xyes)

# for mono/metadata/debug-symfile.c
AC_CHECK_HEADERS(elf.h)

# for support
AC_CHECK_HEADERS(poll.h)
AC_CHECK_HEADERS(sys/poll.h)
AC_CHECK_HEADERS(sys/wait.h)
AC_CHECK_HEADERS(grp.h)
AC_CHECK_HEADERS(syslog.h)

# for mono/dis
AC_CHECK_HEADERS(wchar.h)
case "$host" in
	*-*-*freebsd6*)
		AC_CHECK_HEADERS(ieeefp.h)
	;;
	*-*-*freebsd*)
		/* Only freebsd6 has a working ieeefp.h */
	;;
	*)
		AC_CHECK_HEADERS(ieeefp.h)
	;;
esac
AC_MSG_CHECKING(for isinf)
AC_TRY_LINK([#include <math.h>], [
	int f = isinf (1);
], [
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_ISINF, 1, [isinf available])
], [
	# We'll have to use signals
	AC_MSG_RESULT(no)
])


# not 64 bit clean in cross-compile
AC_CHECK_SIZEOF(void *, 4)

WARN=''
if test x"$GCC" = xyes; then
        WARN='-Wall -Wunused -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes  -Wmissing-prototypes -Wnested-externs -Wpointer-arith -Wno-cast-qual -Wcast-align -Wwrite-strings'
		# The runtime code does not respect ANSI C strict aliasing rules
		CFLAGS="$CFLAGS -fno-strict-aliasing"

		ORIG_CFLAGS=$CFLAGS
		CFLAGS="$CFLAGS -Wdeclaration-after-statement"
		AC_MSG_CHECKING(for -Wdeclaration-after-statement option to gcc)
		AC_TRY_COMPILE([], [
						   void main () { }
		], [
		   AC_MSG_RESULT(yes)
		], [
		   AC_MSG_RESULT(no)
		   CFLAGS=$ORIG_CFLAGS
		])
else
	# The Sun Forte compiler complains about inline functions that access static variables
	# so disable all inlining.
	case "$host" in
	*-*-solaris*)
		CFLAGS="$CFLAGS -Dinline="
		;;
	esac
fi
CFLAGS="$CFLAGS -g $WARN"

# Where's the 'mcs' source tree?
if test -d $srcdir/mcs; then
  mcsdir=mcs
else
  mcsdir=../mcs
fi

mcs_topdir='$(top_srcdir)/'$mcsdir
mcs_topdir_from_srcdir='$(top_builddir)/'$mcsdir

AC_SUBST([mcs_topdir])
AC_SUBST([mcs_topdir_from_srcdir])

AC_ARG_WITH([libgdiplus], 
	[  --with-libgdiplus=installed|sibling|<path>	Override the libgdiplus used for System.Drawing tests (defaults to NO)], 
	[], [with_libgdiplus=installed])

case $with_libgdiplus in
no|installed) libgdiplus_loc= ;;
yes|sibling) libgdiplus_loc=`cd ../libgdiplus && pwd`/src/libgdiplus.la ;;
/*) libgdiplus_loc=$with_libgdiplus ;;
*) libgdiplus_loc=`pwd`/$with_libgdiplus ;;
esac
AC_SUBST([libgdiplus_loc])

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
	AC_MSG_ERROR([You need to install pkg-config])
fi

dnl for use on the build system
dnl pkg-config is stupid
BUILD_GLIB_CFLAGS=`$PKG_CONFIG --cflags glib-2.0 gthread-2.0`
BUILD_GLIB_LIBS=`$PKG_CONFIG --libs glib-2.0 gthread-2.0`
AC_SUBST(BUILD_GLIB_CFLAGS)
AC_SUBST(BUILD_GLIB_LIBS)

pkg_config_path=
AC_ARG_WITH(crosspkgdir, [  --with-crosspkgdir=/path/to/pkg-config/dir],
	if test x$with_crosspkgdir = "x"; then
		if test -s $PKG_CONFIG_PATH; then
			pkg_config_path=$PKG_CONFIG_PATH
		fi
	else
		pkg_config_path=$with_crosspkgdir
		PKG_CONFIG_PATH=$pkg_config_path
		export PKG_CONFIG_PATH
	fi
)

## Versions of dependencies
GLIB_REQUIRED_VERSION=1.3.11

PKG_CHECK_MODULES(BASE_DEPENDENCIES, glib-2.0 >= $GLIB_REQUIRED_VERSION)

GLIB_CFLAGS=`$PKG_CONFIG --cflags glib-2.0 gthread-2.0`
GLIB_LIBS=`$PKG_CONFIG --libs glib-2.0 gthread-2.0`
GMODULE_CFLAGS=`$PKG_CONFIG --cflags gmodule-2.0`
GMODULE_LIBS=`$PKG_CONFIG --libs gmodule-2.0`

AC_SUBST(GLIB_CFLAGS)
AC_SUBST(GLIB_LIBS)
AC_SUBST(GMODULE_CFLAGS)
AC_SUBST(GMODULE_LIBS)

if test x$platform_win32 = xyes; then   
   AC_MSG_CHECKING(for cygwin glib2-dev package)
   if [ cygcheck --f /usr/lib/libglib-2.0.dll.a | grep -q glib2-devel ]; then
      AC_MSG_RESULT(found)
	  AC_MSG_ERROR([Mono cannot be built with the cygwin glib2-devel package installed, because that package doesn't work with -mno-cygwin. Please uninstall it then re-run configure.])
   else
      AC_MSG_RESULT(not found, ok)
   fi

   AC_MSG_CHECKING(for broken gwin32.h)
   glib_include=`$PKG_CONFIG --cflags-only-I glib-2.0 | sed -e 's/ -I.*//g' | sed -e 's/-I//g'`
   if test -f $glib_include/glib/gwin32.h; then
	  if [ grep ftruncate $glib_include/glib/gwin32.h | grep -q define ]; then
		 AC_MSG_RESULT(failed)
		 hashmark='#'
		 AC_MSG_ERROR([Your version of gwin32.h is broken and will cause compilation errors when building mono. Please fix it by deleting the line: '$hashmark   define ftruncate...' from '$glib_include/glib/gwin32.h' then re-run configure.])
	  fi
   fi
   AC_MSG_RESULT(ok)
fi

AC_ARG_WITH(gc, [  --with-gc=boehm,included,none],[gc=$with_gc],[gc=$gc_default])

# Enable support for fast thread-local storage
# Some systems have broken support, so we allow to disable it.
AC_ARG_WITH(tls, [  --with-tls=__thread,pthread       select Thread Local Storage implementation],[],[with_tls=__thread])

# Kept for compatibility
AC_ARG_WITH(nptl, [  --with-nptl=yes,no      deprecated, use --with-tls instead],[],[with_nptl=default])

if test "x$with_nptl" != "xdefault"; then
   if test "x$with_nptl" = "xyes"; then
      AC_MSG_WARN([--with-nptl=yes is deprecated, use --with-tls=__thread option instead.])
	  with_tls=__thread
   fi
   if test "x$with_nptl" = "xno"; then
      AC_MSG_WARN([--with-nptl=no is deprecated, use --with-tls=pthread option instead.])
	  with_tls=pthread
   fi
fi

# Enable support for using sigaltstack for SIGSEGV and stack overflow handling
# This does not work on some platforms (bug #55253)
AC_ARG_WITH(sigaltstack, [  --with-sigaltstack=yes,no      enable/disable support for sigaltstack],[],[with_sigaltstack=no])

AC_ARG_WITH(static_mono, [  --with-static_mono=yes,no      link mono statically to libmono (faster)],[],[with_static_mono=yes])

if test "x$enable_static" = "xno"; then
   with_static_mono=no
fi

AM_CONDITIONAL(STATIC_MONO, test x$with_static_mono != xno)

AC_ARG_ENABLE(minimal, [  --enable-minimal=LIST      drop support for LIST subsystems.
  LIST is a comma-separated list from: aot, profiler, decimal, pinvoke, debug, reflection_emit.],
[
	for feature in `echo "$enable_minimal" | sed -e "s/,/ /g"`; do
		eval "mono_feature_disable_$feature='yes'"
		AC_MSG_NOTICE([Disabled support for feature: $feature])
	done
	disabled="Disabled:    $enable_minimal"
],[])

if test "x$mono_feature_disable_aot" = "xyes"; then
	AC_DEFINE(DISABLE_AOT, 1, [Disable AOT support])
fi

if test "x$mono_feature_disable_profiler" = "xyes"; then
	AC_DEFINE(DISABLE_PROFILER, 1, [Disable default profiler support])
fi

if test "x$mono_feature_disable_decimal" = "xyes"; then
	AC_DEFINE(DISABLE_DECIMAL, 1, [Disable System.Decimal support])
fi

if test "x$mono_feature_disable_pinvoke" = "xyes"; then
	AC_DEFINE(DISABLE_PINVOKE, 1, [Disable P/Invoke support])
fi

if test "x$mono_feature_disable_debug" = "xyes"; then
	AC_DEFINE(DISABLE_DEBUG, 1, [Disable runtime debugging support])
fi

if test "x$mono_feature_disable_reflection_emit" = "xyes"; then
	AC_DEFINE(DISABLE_REFLECTION_EMIT, 1, [Disable reflection emit support])
fi

LIBGC_CFLAGS=
LIBGC_LIBS=
LIBGC_STATIC_LIBS=
libgc_dir=
case "x$gc" in
	xboehm|xbohem|xyes)
		AC_CHECK_HEADERS(gc.h gc/gc.h, gc_headers=yes)
		AC_CHECK_LIB(gc, GC_malloc, found_boehm="yes",,$libdl)

		if test "x$found_boehm" != "xyes"; then
			AC_MSG_ERROR("GC requested but libgc not found! Install libgc or run configure with --with-gc=none.")
		fi
		if test "x$gc_headers" != "xyes"; then
			AC_MSG_ERROR("GC requested but header files not found! You may need to install them by hand.")
		fi

		AC_DEFINE(HAVE_BOEHM_GC)
		AC_SUBST(HAVE_BOEHM_GC)
		LIBGC_LIBS="-lgc $libdl"
		LIBGC_STATIC_LIBS="$LIBGC_LIBS"

		# AC_CHECK_FUNCS does not work for some reason...
		AC_CHECK_LIB(gc, GC_gcj_malloc, found_gcj_malloc="yes",,$libdl)
		if test "x$found_gcj_malloc" = "xyes"; then
			AC_DEFINE(HAVE_GC_GCJ_MALLOC)
		fi
		AC_CHECK_LIB(gc, GC_enable, found_gc_enable="yes",,$libdl)
		if test "x$found_gc_enable" = "xyes"; then
			AC_DEFINE(HAVE_GC_ENABLE)
		fi
		;;

	xincluded)
		AC_CONFIG_SUBDIRS(libgc)

		found_boehm=yes
		gc_headers=yes
		use_included_gc=yes
		libgc_dir=libgc

		LIBGC_CFLAGS='-I$(top_srcdir)/libgc/include'
		LIBGC_LIBS='$(top_builddir)/libgc/libmonogc.la'
		LIBGC_STATIC_LIBS='$(top_builddir)/libgc/libmonogc-static.la'

		AC_DEFINE(HAVE_BOEHM_GC)
		AC_SUBST(HAVE_BOEHM_GC)

		AC_DEFINE(HAVE_GC_H)
		AC_DEFINE(USE_INCLUDED_LIBGC)

		# The included libgc contains GCJ support
		AC_DEFINE(HAVE_GC_GCJ_MALLOC)
		AC_DEFINE(HAVE_GC_ENABLE)
		;;

	xnone)
		AC_MSG_WARN("Compiling mono without GC.")
		;;
	*)
		AC_MSG_ERROR([Invalid argument to --with-gc.])
		;;
esac

AC_ARG_WITH(large-heap, [  --with-large-heap=yes,no    Enable support for GC heaps larger than 3GB], [large_heap=$withval], [large_heap=no])
if test "x$large_heap" = "xyes"; then
   echo "FOO"
   CPPFLAGS="$CPPFLAGS -DLARGE_CONFIG"
fi

# tell libgc/configure about what we want
ac_configure_args="$ac_configure_args --disable-embed-check --with-libgc-threads=$libgc_threads"

AM_CONDITIONAL(INCLUDED_LIBGC, test x$use_included_gc = xyes)
AC_SUBST(LIBGC_CFLAGS)
AC_SUBST(LIBGC_LIBS)
AC_SUBST(LIBGC_STATIC_LIBS)
AC_SUBST(libgc_dir)

dnl
dnl End of libgc checks
dnl

if test x$platform_win32 = xno; then

	dnl ******************************************************************
	dnl *** Checks for the IKVM JNI interface library                  ***
	dnl ******************************************************************
	AC_ARG_WITH(ikvm-native, [  --with-ikvm-native=yes,no  build the IKVM JNI interface library],[with_ikvm_native=$withval],[with_ikvm_native=yes])

	ikvm_native_dir=
	if test x$with_ikvm_native = xyes; then
		ikvm_native_dir=ikvm-native
		jdk_headers_found="IKVM Native"
	fi

	AC_SUBST(ikvm_native_dir)

	AC_CHECK_FUNCS(getgrgid_r)
	AC_CHECK_FUNCS(getgrnam_r)
	AC_CHECK_FUNCS(getpwnam_r)
	AC_CHECK_FUNCS(getpwuid_r)
	AC_CHECK_FUNCS(getresuid)
	AC_CHECK_FUNCS(setresuid)
	AC_CHECK_FUNCS(kqueue)
	AC_CHECK_FUNCS(backtrace_symbols)

	dnl ******************************************************************
	dnl *** Check for large file support                               ***
	dnl *** (If we were using autoconf 2.50 we'd use AC_SYS_LARGEFILE) ***
	dnl ******************************************************************
	
	# Check that off_t can represent 2**63 - 1 correctly, working around
	# potential compiler bugs.  Defines LARGE_FILE_SUPPORT, adds $1 to
	# CPPFLAGS and sets $large_offt to yes if the test succeeds
	large_offt=no
	AC_DEFUN(LARGE_FILES, [
		large_CPPFLAGS=$CPPFLAGS
		CPPFLAGS="$CPPFLAGS $1"
		AC_TRY_RUN([
			#include <sys/types.h>

			#define BIG_OFF_T (((off_t)1<<62)-1+((off_t)1<<62))

			int main(void) {
				int big_off_t=((BIG_OFF_T%2147483629==721) &&
					       (BIG_OFF_T%2147483647==1));
				if(big_off_t) {
					exit(0);
				} else {
					exit(1);
				}
			}
		], [
			AC_MSG_RESULT(ok)
			AC_DEFINE(HAVE_LARGE_FILE_SUPPORT)
			large_CPPFLAGS="$large_CPPFLAGS $1"
			large_offt=yes
		], [
			AC_MSG_RESULT(no)
		], "")
		CPPFLAGS=$large_CPPFLAGS
	])

	AC_MSG_CHECKING(if off_t is 64 bits wide)
	LARGE_FILES("")
	if test $large_offt = no; then
		AC_MSG_CHECKING(if _FILE_OFFSET_BITS=64 gives 64 bit off_t)
		LARGE_FILES("-D_FILE_OFFSET_BITS=64")
	fi
	if test $large_offt = no; then
		AC_MSG_WARN([No 64 bit file size support available])
	fi
	
	dnl *****************************
	dnl *** Checks for libsocket  ***
	dnl *****************************
	AC_CHECK_LIB(socket, socket, LIBS="$LIBS -lsocket")

	dnl *******************************
	dnl *** Checks for MSG_NOSIGNAL ***
	dnl *******************************
	AC_MSG_CHECKING(for MSG_NOSIGNAL)
	AC_TRY_COMPILE([#include <sys/socket.h>], [
		int f = MSG_NOSIGNAL;
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_MSG_NOSIGNAL)
	], [
		# We'll have to use signals
		AC_MSG_RESULT(no)
	])

	dnl *****************************
	dnl *** Checks for SOL_IP     ***
	dnl *****************************
	AC_MSG_CHECKING(for SOL_IP)
	AC_TRY_COMPILE([#include <netdb.h>], [
		int level = SOL_IP;
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SOL_IP)
	], [
		# We'll have to use getprotobyname
		AC_MSG_RESULT(no)
	])

	dnl *****************************
	dnl *** Checks for SOL_IPV6     ***
	dnl *****************************
	AC_MSG_CHECKING(for SOL_IPV6)
	AC_TRY_COMPILE([#include <netdb.h>], [
		int level = SOL_IPV6;
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SOL_IPV6)
	], [
		# We'll have to use getprotobyname
		AC_MSG_RESULT(no)
	])

	dnl *****************************
	dnl *** Checks for SOL_TCP    ***
	dnl *****************************
	AC_MSG_CHECKING(for SOL_TCP)
	AC_TRY_COMPILE([#include <netdb.h>], [
		int level = SOL_TCP;
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SOL_TCP)
	], [
		# We'll have to use getprotobyname
		AC_MSG_RESULT(no)
	])

	dnl *****************************
	dnl *** Checks for IP_PKTINFO ***
	dnl *****************************
	AC_MSG_CHECKING(for IP_PKTINFO)
	AC_TRY_COMPILE([#include <netdb.h>], [
		int level = IP_PKTINFO;
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IP_PKTINFO)
	], [
		AC_MSG_RESULT(no)
	])

	dnl *********************************
	dnl *** Check for struct ip_mreqn ***
	dnl *********************************
	AC_MSG_CHECKING(for struct ip_mreqn)
	AC_TRY_COMPILE([#include <netinet/in.h>], [
		struct ip_mreqn mreq;
		mreq.imr_address.s_addr = 0;
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_STRUCT_IP_MREQN)
	], [
		# We'll just have to try and use struct ip_mreq
		AC_MSG_RESULT(no)
		AC_MSG_CHECKING(for struct ip_mreq)
		AC_TRY_COMPILE([#include <netinet/in.h>], [
			struct ip_mreq mreq;
			mreq.imr_interface.s_addr = 0;
		], [
			# Yes, we have it...
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_STRUCT_IP_MREQ)
		], [
			# No multicast support
			AC_MSG_RESULT(no)
		])
	])
	
	dnl **********************************
	dnl *** Check for gethostbyname2_r ***
	dnl **********************************
	AC_MSG_CHECKING(for gethostbyname2_r)
		AC_TRY_LINK([#include <netdb.h>], [
		gethostbyname2_r(NULL,0,NULL,NULL,0,NULL,NULL);
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GETHOSTBYNAME2_R)
	], [
		AC_MSG_RESULT(no)
	])

	dnl *****************************
	dnl *** Checks for libnsl     ***
	dnl *****************************
	AC_CHECK_LIB(nsl, gethostbyaddr, LIBS="$LIBS -lnsl")

	AC_CHECK_FUNCS(inet_pton inet_aton)

	dnl ***********************************************
	dnl *** Checks for size of sockaddr_un.sun_path ***
	dnl ***********************************************
	# AC_CHECK_SIZEOF can't cope with struct members :-(
	AC_MSG_CHECKING(size of sockaddr_un.sun_path)
	AC_CACHE_VAL(cv_mono_sizeof_sunpath,
		[AC_TRY_RUN([
			#include <sys/types.h>
			#include <stdio.h>
			#include <sys/un.h>

			int main(void) {
				struct sockaddr_un sock_un;
				FILE *f=fopen("conftestval", "w");
				if(!f) exit(1);
				fprintf(f, "%d\n", sizeof(sock_un.sun_path));
				exit(0);
			}
		], cv_mono_sizeof_sunpath=`cat conftestval`,
		   cv_mono_sizeof_sunpath=0,
		   cv_mono_sizeof_sunpath=0)])dnl
	AC_MSG_RESULT($cv_mono_sizeof_sunpath)
	AC_DEFINE_UNQUOTED(MONO_SIZEOF_SUNPATH, $cv_mono_sizeof_sunpath)

	dnl *************************************
	dnl *** Checks for zero length arrays ***
	dnl *************************************
	AC_MSG_CHECKING(whether $CC supports zero length arrays)
	AC_TRY_COMPILE([
                struct s {
                        int  length;
                        char data [0];
                };
        ], [], [
		AC_MSG_RESULT(yes)
		AC_DEFINE_UNQUOTED(MONO_ZERO_ARRAY_LENGTH, 0)
	], [
		AC_MSG_RESULT(no)
		AC_DEFINE_UNQUOTED(MONO_ZERO_ARRAY_LENGTH, 1)
	])

	dnl *****************************
	dnl *** Checks for libxnet    ***
	dnl *****************************
	case "${host}" in
		*solaris* )
			AC_MSG_CHECKING(for Solaris XPG4 support)
			if test -f /usr/lib/libxnet.so; then
				CPPFLAGS="$CPPFLAGS -D_XOPEN_SOURCE=500"
	    			CPPFLAGS="$CPPFLAGS -D__EXTENSIONS__"
				CPPFLAGS="$CPPFLAGS -D_XOPEN_SOURCE_EXTENDED=1"
           			LIBS="$LIBS -lxnet"
  	    			AC_MSG_RESULT(yes)
			else
  	    			AC_MSG_RESULT(no)
			fi

			if test "$GCC" = "yes"; then
		    		CFLAGS="$CFLAGS -Wno-char-subscripts"
			fi
    		;;
	esac

	dnl *****************************
	dnl *** Checks for libpthread ***
	dnl *****************************
# on FreeBSD -STABLE, the pthreads functions all reside in libc_r
# and libpthread does not exist
#
	case "${host}" in
		*-*-*freebsd4*)
			AC_CHECK_LIB(pthread, main, LIBS="$LIBS -pthread")
		;;
		*-*-*freebsd5*)
			AC_CHECK_LIB(pthread, main, LIBS="$LIBS -pthread")
		;;
		*-*-*freebsd6*)
			AC_CHECK_LIB(pthread, main, LIBS="$LIBS -pthread")
		;;
		*)
			AC_CHECK_LIB(pthread, main, LIBS="$LIBS -lpthread")
		;;
	esac
	AC_CHECK_HEADERS(pthread.h)
	AC_CHECK_FUNCS(pthread_mutex_timedlock)
	AC_CHECK_FUNCS(pthread_getattr_np pthread_attr_get_np)
	AC_MSG_CHECKING(for PTHREAD_MUTEX_RECURSIVE)
	AC_TRY_COMPILE([ #include <pthread.h>], [
		pthread_mutexattr_t attr;
		pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);
	], [
		AC_MSG_RESULT(ok)
	], [
		AC_MSG_RESULT(no)
		AC_MSG_WARN(Using mono_mutex_t for recursive mutexes)
		AC_DEFINE(USE_MONO_MUTEX)
	])
	AC_CHECK_FUNCS(pthread_attr_setstacksize)

	dnl ***********************************
	dnl *** Checks for working __thread ***
	dnl ***********************************
	AC_MSG_CHECKING(for working __thread)
	if test "x$with_tls" != "x__thread"; then
		AC_MSG_RESULT(disabled)
	else
		AC_TRY_RUN([
			#include <pthread.h>
			__thread int i;
			static int res1, res2;

			void thread_main (void *arg)
			{
				i = arg;
				sleep (1);
				if (arg == 1)
					res1 = (i == arg);
				else
					res2 = (i == arg);
			}

			int main () {
				pthread_t t1, t2;

				i = 5;

				pthread_create (&t1, NULL, thread_main, 1);
				pthread_create (&t2, NULL, thread_main, 2);

				pthread_join (t1, NULL);
				pthread_join (t2, NULL);

				return !(res1 + res2 == 2);
			}
		], [
				AC_MSG_RESULT(yes)
		], [
				AC_MSG_RESULT(no)
				with_tls=pthread
		])
	fi

	dnl **************************************
	dnl *** Checks for working sigaltstack ***
	dnl **************************************
	AC_MSG_CHECKING(for working sigaltstack)
	if test "x$with_sigaltstack" != "xyes"; then
		AC_MSG_RESULT(disabled)
	else
		AC_TRY_RUN([
			#include <stdio.h>
			#include <stdlib.h>
			#include <unistd.h>
			#include <signal.h>
			#include <pthread.h>
			#include <sys/wait.h>
			#if defined(__FreeBSD__) || defined(__NetBSD__)
			#define SA_STACK SA_ONSTACK
			#endif
			static void
			sigsegv_signal_handler (int _dummy, siginfo_t *info, void *context)
			{
				exit (0);
			}

			static void *
			loop (void *ignored)
			{
				char *ptr = NULL;

				*ptr = 0;
				return NULL;
			}

			static void
			child ()
			{
				struct sigaction sa;
				struct sigaltstack sas;
				pthread_t id;
				pthread_attr_t attr;

				sa.sa_sigaction = sigsegv_signal_handler;
				sigemptyset (&sa.sa_mask);
				sa.sa_flags = SA_SIGINFO | SA_ONSTACK;
				if (sigaction (SIGSEGV, &sa, NULL) == -1) {
					perror ("sigaction");
					return;
				}

				sas.ss_sp = malloc (SIGSTKSZ);
				sas.ss_size = SIGSTKSZ;
				sas.ss_flags = 0;
				if (sigaltstack (&sas, NULL) == -1) {
					perror ("sigaltstack");
					return;
				}

				pthread_attr_init (&attr);
				if (pthread_create(&id, &attr, loop, &attr) != 0) {
					printf ("pthread_create\n");
					return;
				}

				sleep (100);
			}

			int
			main ()
			{
				pid_t son;
				int status;
				int i;

				son = fork ();
				if (son == -1) {
					return 1;
				}

				if (son == 0) {
					child ();
					return 0;
				}

				for (i = 0; i < 3; ++i) {
					sleep (1);
					waitpid (son, &status, WNOHANG);
					if (WIFEXITED (status) && WEXITSTATUS (status) == 0)
						return 0;
				}

				kill (son, SIGKILL);
				return 1;
			}

		], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_WORKING_SIGALTSTACK)
		], [
				with_sigaltstack=no
				AC_MSG_RESULT(no)
		])
	fi

	dnl ********************************
	dnl *** Checks for semaphore lib ***
	dnl ********************************
	# 'Real Time' functions on Solaris
	# posix4 on Solaris 2.6
	# pthread (first!) on Linux
	AC_SEARCH_LIBS(sem_init, pthread rt posix4) 

	dnl ********************************
	dnl *** Checks for timezone stuff **
	dnl ********************************
	AC_CACHE_CHECK(for tm_gmtoff in struct tm, ac_cv_struct_tm_gmtoff,
		AC_TRY_COMPILE([
			#include <time.h>
			], [
			struct tm tm;
			tm.tm_gmtoff = 1;
			], ac_cv_struct_tm_gmtoff=yes, ac_cv_struct_tm_gmtoff=no))
	if test $ac_cv_struct_tm_gmtoff = yes; then
		AC_DEFINE(HAVE_TM_GMTOFF)
	else
		AC_CACHE_CHECK(for timezone variable, ac_cv_var_timezone,
			AC_TRY_COMPILE([
				#include <time.h>
			], [
				timezone = 1;
			], ac_cv_var_timezone=yes, ac_cv_var_timezone=no))
		if test $ac_cv_var_timezone = yes; then
			AC_DEFINE(HAVE_TIMEZONE)
		else
			AC_ERROR(unable to find a way to determine timezone)
		fi
	fi

	dnl *********************************
	dnl *** Checks for math functions ***
	dnl *********************************
        LIBS="$LIBS -lm";
        AC_CHECK_FUNCS(finite, , AC_MSG_CHECKING(for finite in math.h)
                AC_TRY_LINK([#include <math.h>], 
                [ finite(0.0); ], 
                AC_DEFINE(HAVE_FINITE) AC_MSG_RESULT(yes),
                AC_MSG_RESULT(no)))
        AC_CHECK_FUNCS(isfinite, , AC_MSG_CHECKING(for isfinite in math.h)
                AC_TRY_LINK([#include <math.h>], 
                [ isfinite(0.0); ], 
                AC_DEFINE(HAVE_ISFINITE) AC_MSG_RESULT(yes),
                AC_MSG_RESULT(no)))

	dnl ****************************************************************
	dnl *** Checks for working poll() (macosx defines it but doesn't ***
	dnl *** have it in the library (duh))                            ***
	dnl ****************************************************************
	AC_CHECK_FUNCS(poll)

	dnl *************************
	dnl *** Check for signbit ***
	dnl *************************
	AC_MSG_CHECKING(for signbit)
	AC_TRY_LINK([#include <math.h>], [
		int s = signbit(1.0);
	], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SIGNBIT)
	], [
		AC_MSG_RESULT(no)
	]) 

	dnl *********************
	dnl *** Check for AIO ***
	dnl *********************
	AC_MSG_CHECKING([for SIGEV_THREAD definition])
	dnl Some systems (FreeBSD at least) may have aio_read
	dnl but don't support/define SIGEV_THREAD.
	AC_TRY_COMPILE([
	#include <sys/signal.h>
	],[
	int x = SIGEV_THREAD;
	],[
		ac_cv_c_sigev_thread=yes
		AC_MSG_RESULT(yes)
	],[
		AC_MSG_RESULT(no)
	])

	if test "$ac_cv_c_sigev_thread" = "yes" ; then
		AC_CHECK_HEADERS(aio.h sys/aio.h)
		AC_CHECK_LIB(rt, aio_read, [ LIBS="$LIBS -lrt" ],)
		SIGVAL_PTR="undefined"
		if test "$ac_cv_header_aio_h" = "yes" -o "$ac_cv_header_sys_aio_h" = "yes" ; then
			AC_CHECK_MEMBER(union sigval.sigval_ptr,SIGVAL_PTR="sigval_ptr",, [
					#include <sys/signal.h>
					])
			AC_CHECK_MEMBER(union sigval.sival_ptr,SIGVAL_PTR="sival_ptr",, [
					#include <sys/signal.h>
					])
			if test "$SIGVAL_PTR" = "undefined" ; then
				AC_MSG_ERROR([Unable to detect field name in 'union sigval'])
			fi
		fi
		AC_DEFINE_UNQUOTED(SIGVAL_PTR,$SIGVAL_PTR,[Pointer field name in 'union sigval'])
	fi

	dnl **********************************
	dnl *** epoll			   ***
	dnl **********************************
	AC_CHECK_HEADERS(sys/epoll.h)
	haveepoll=no
	AC_CHECK_FUNCS(epoll_ctl, [haveepoll=yes], )
	if test "x$haveepoll" = "xyes" -a "x$ac_cv_header_sys_epoll_h" = "xyes" ; then
		AC_DEFINE(HAVE_EPOLL, 1, [epoll supported])
	fi

	dnl **********************************
	dnl *** Checks for MonoPosixHelper ***
	dnl **********************************
	AC_CHECK_HEADERS(checklist.h)
	AC_CHECK_HEADERS(fstab.h)
	AC_CHECK_HEADERS(sys/sendfile.h)
	AC_CHECK_HEADERS(sys/statvfs.h)
	AC_CHECK_HEADERS(sys/vfstab.h)
	AC_CHECK_HEADERS(sys/xattr.h)
	AC_CHECK_FUNCS(getdomainname)
	AC_CHECK_FUNCS(setdomainname)
	AC_CHECK_FUNCS(fgetgrent)
	AC_CHECK_FUNCS(fgetpwent)
	AC_CHECK_FUNCS(fgetpwent)
	AC_CHECK_FUNCS(getfsstat)
	AC_CHECK_FUNCS(posix_fadvise)
	AC_CHECK_FUNCS(posix_fallocate)
	AC_CHECK_FUNCS(posix_madvise)
	AC_CHECK_FUNCS(vsnprintf)
	AC_CHECK_FUNCS(sendfile)
	AC_CHECK_FUNCS(sethostid)
	AC_CHECK_FUNCS(statfs)
	AC_CHECK_FUNCS(fstatfs)
	AC_CHECK_FUNCS(statvfs)
	AC_CHECK_FUNCS(fstatvfs)
	AC_CHECK_FUNCS(stime)
	AC_CHECK_FUNCS(strerror_r)
	AC_CHECK_FUNCS(ttyname_r)
	AC_CHECK_SIZEOF(size_t)
	AC_CHECK_MEMBERS(
		[struct dirent.d_off, struct dirent.d_reclen, struct dirent.d_type],,, 
		[#include <sys/types.h>
		 #include <dirent.h>])

	dnl *********************************
	dnl *** Check for Console 2.0 I/O ***
	dnl *********************************
	AC_CHECK_HEADERS([curses.h])
	AC_CHECK_HEADERS([term.h], [], [],
	[#if HAVE_CURSES_H
	 #include <curses.h>
	 #endif
	])
	AC_CHECK_HEADERS([termios.h])
else
	jdk_headers_found=no
	AC_CHECK_LIB(ws2_32, main, LIBS="$LIBS -lws2_32", AC_ERROR(bad mingw install?))
	AC_CHECK_LIB(psapi, main, LIBS="$LIBS -lpsapi", AC_ERROR(bad mingw install?))
	AC_CHECK_LIB(ole32, main, LIBS="$LIBS -lole32", AC_ERROR(bad mingw install?))

	dnl *********************************
	dnl *** Check for struct ip_mreqn ***
	dnl *********************************
	AC_MSG_CHECKING(for struct ip_mreqn)
	AC_TRY_COMPILE([#include <ws2tcpip.h>], [
		struct ip_mreqn mreq;
		mreq.imr_address.s_addr = 0;
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_STRUCT_IP_MREQN)
	], [
		# We'll just have to try and use struct ip_mreq
		AC_MSG_RESULT(no)
		AC_MSG_CHECKING(for struct ip_mreq)
		AC_TRY_COMPILE([#include <ws2tcpip.h>], [
			struct ip_mreq mreq;
			mreq.imr_interface.s_addr = 0;
		], [
			# Yes, we have it...
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_STRUCT_IP_MREQ)
		], [
			# No multicast support
			AC_MSG_RESULT(no)
		])
	])
fi

dnl socklen_t check
AC_MSG_CHECKING(for socklen_t)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
],[
  socklen_t foo;
],[
ac_cv_c_socklen_t=yes
	AC_DEFINE(HAVE_SOCKLEN_T)
	AC_MSG_RESULT(yes)
],[
	AC_MSG_RESULT(no)
])

AC_MSG_CHECKING(for array element initalizer support)
AC_TRY_COMPILE([#include <sys/socket.h>], [
	const int array[] = {[1] = 2,};
], [
	# Yes, we have it...
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_ARRAY_ELEM_INIT,1,[Supports C99 array initialization])
], [
	# We'll have to use signals
	AC_MSG_RESULT(no)
])

AC_CHECK_FUNCS(trunc, , AC_MSG_CHECKING(for trunc in math.h)
	# Simply calling trunc (0.0) is no good since gcc will optimize the call away
	AC_TRY_LINK([#include <math.h>], 
	[ static void *p = &trunc; ],
	[
		AC_DEFINE(HAVE_TRUNC) 
		AC_MSG_RESULT(yes)
		ac_cv_trunc=yes
	],
	AC_MSG_RESULT(no)))

if test "x$ac_cv_truncl" != "xyes"; then
   AC_CHECK_LIB(sunmath, aintl, [ AC_DEFINE(HAVE_AINTL) LIBS="$LIBS -lsunmath"])
fi

dnl ****************************
dnl *** Look for /dev/random ***
dnl ****************************

AC_MSG_CHECKING([if usage of random device is requested])
AC_ARG_ENABLE(dev-random,
[  --disable-dev-random    disable the use of the random device],
try_dev_random=$enableval, try_dev_random=yes)
AC_MSG_RESULT($try_dev_random)

case "{$target}" in
    *-openbsd*)
    NAME_DEV_RANDOM="/dev/srandom"
    ;;

dnl Win32 does not have /dev/random, they have their own method...

    *-*-mingw*|*-*-cygwin*)
    ac_cv_have_dev_random=no
    ;;

dnl Everywhere else, it's /dev/random

    *)
    NAME_DEV_RANDOM="/dev/random"
    ;;
esac

AC_DEFINE_UNQUOTED(NAME_DEV_RANDOM, "$NAME_DEV_RANDOM")

dnl Now check if the device actually exists

if test "x$try_dev_random" = "xyes"; then
    AC_CACHE_CHECK(for random device, ac_cv_have_dev_random,
    [if test -r "$NAME_DEV_RANDOM" ; then
        ac_cv_have_dev_random=yes; else ac_cv_have_dev_random=no; fi])
    if test "x$ac_cv_have_dev_random" = "xyes"; then
        AC_DEFINE(HAVE_CRYPT_RNG)
    fi
else
    AC_MSG_CHECKING(for random device)
    ac_cv_have_dev_random=no
    AC_MSG_RESULT(has been disabled)
fi

if test "x$platform_win32" = "xyes"; then
    AC_DEFINE(HAVE_CRYPT_RNG)
fi

if test "x$ac_cv_have_dev_random" = "xno" \
    && test "x$platform_win32" = "xno"; then
    AC_MSG_WARN([[
***
*** A system-provided entropy source was not found on this system.
*** Because of this, the System.Security.Cryptography random number generator
*** will throw a NotImplemented exception.
***
*** If you are seeing this message, and you know your system DOES have an
*** entropy collection in place, please contact <crichton@gimp.org> and
*** provide information about the system and how to access the random device.
***
*** Otherwise you can install either egd or prngd and set the environment
*** variable MONO_EGD_SOCKET to point to the daemon's socket to use that.
***]])
fi
 
AC_MSG_CHECKING([if inter-process shared handles are requested])
AC_ARG_ENABLE(shared-handles, [  --disable-shared-handles disable inter-process shared handles], try_shared_handles=$enableval, try_shared_handles=yes)
AC_MSG_RESULT($try_shared_handles)
if test "x$try_shared_handles" != "xyes"; then
	AC_DEFINE(DISABLE_SHARED_HANDLES)
	AC_SUBST(DISABLE_SHARED_HANDLES)
fi

#
# ICU 
#
ICU_CFLAGS=""
ICU_LIBS=""
enable_glob="normal;  default"

probe_icu=false
AC_ARG_WITH(icu, [  --with-icu=yes/no],
	if test x$with_icu = xno; then
	   probe_icu=false;
	   AC_MSG_RESULT(Will not probe for ICU)
	fi
	if test x$with_icu = xyes; then
	   probe_icu=true;
	fi
)

if $probe_icu; then
	AC_PATH_PROG(ICU_CONFIG, icu-config, no)
	if test "x$ICU_CONFIG" = "xno" -o ! -x "$ICU_CONFIG"; then
		enable_glob="ICU not found, using non-ICU globalization code."
	else
		enable_glob="ICU, unsupported. Version: `$ICU_CONFIG --version`"
		AC_DEFINE(HAVE_ICU)
		ICU_CFLAGS=`$ICU_CONFIG --cppflags`
		ICU_LIBS=`$ICU_CONFIG --ldflags`
	fi
fi
AC_SUBST(ICU_CFLAGS)
AC_SUBST(ICU_LIBS)

AC_ARG_ENABLE(nunit-tests, [ --enable-nunit-tests	Run the nunit tests of the class library on 'make check'])
AM_CONDITIONAL(ENABLE_NUNIT_TESTS, [test x$enable_nunit_tests = xyes])

TARGET="unknown"
ACCESS_UNALIGNED="yes"

JIT_SUPPORTED=no
INTERP_SUPPORTED=no
LIBC="libc.so.6"
INTL="libc.so.6"

jit_wanted=false
interp_wanted=false
case "$host" in
#	mips-sgi-irix5.* | mips-sgi-irix6.*)
#		TARGET=MIPS;
#		ACCESS_UNALIGNED="no"
#		;;
	i*86-*-*)
		TARGET=X86;
		arch_target=x86;
		JIT_SUPPORTED=yes
		jit_wanted=true
		;;
	x86_64-*-* | amd64-*-*)
		TARGET=AMD64;
		arch_target=amd64;
		JIT_SUPPORTED=yes
		jit_wanted=true
		;;
	sparc*-*-*)
		if test "x$ac_cv_sizeof_void_p" = "x8"; then
		   TARGET=SPARC64
		else
			TARGET=SPARC
		fi
		arch_target=sparc;
		JIT_SUPPORTED=yes
		ACCESS_UNALIGNED="no"
		LIBC="libc.so"
		INTL="libintl.so"
		jit_wanted=true
		if test x"$GCC" = xyes; then
			CFLAGS="$CFLAGS -Wno-cast-align"
		fi
		;;
       alpha*-*-linux* | alpha*-*-osf*)
		TARGET=ALPHA;
		ACCESS_UNALIGNED="no"
		JIT_SUPPORTED=no
		INTERP_SUPPORTED=yes
		interp_wanted=true
		arch_target=alpha;
	       ;;
	*-*-mingw*|*-*-cygwin*)
		INTL="intl"
		;;
#	ia64-*-linux* | ia64-*-hpux*)
#		TARGET=IA64;
#		arch_target=ia64;
#		JIT_SUPPORTED=no;
#		ACCESS_UNALIGNED="no";
#		case "$host_os" in
#			linux*) LIBC="libc.so.6.1";;
#			hpux*)  LIBC="libc.so.1";;
#		esac
#		;;
#       m68k-*-linux*)
#		TARGET=M68K
#		;;
	hppa2.0w-hp-hpux11.00 | hppa64-hp-hpux11.00)
		TARGET=HPPA;
		arch_target=hppa; 
		LIBC="libc.sl"
		ACCESS_UNALIGNED="no"
		INTERP_SUPPORTED=yes
		interp_wanted=true
		;;
	hppa*linux*)
		TARGET=HPPA;
		arch_target=hppa; 
		ACCESS_UNALIGNED="no"
		INTERP_SUPPORTED=yes
		interp_wanted=true
		;;
	macppc-*-openbsd* | powerpc-*-linux* | powerpc-*-openbsd* | \
        powerpc-*-sysv* | powerpc-*-darwin*)
		TARGET=POWERPC;
		AC_DEFINE(MONO_ARCH_REGPARMS,1,[Architecture uses registers for Parameters])
		arch_target=ppc;
		JIT_SUPPORTED=yes
		jit_wanted=true
		;;
	arm-*-linux-* | armv4l-*-linux-*)
		TARGET=ARM;
		arch_target=arm;
		ACCESS_UNALIGNED="no"
		INTERP_SUPPORTED=yes
		interp_wanted=true
		;;
	s390-*-linux*)
		TARGET=S390;
		AC_DEFINE(MONO_ARCH_REGPARMS,1,[Architecture uses registers for Parameters])
		arch_target=s390;
		ACCESS_UNALIGNED="no"
		JIT_SUPPORTED=yes
		;;
	s390x-*-linux*)
		TARGET=S390x;
		AC_DEFINE(MONO_ARCH_REGPARMS,1,[Architecture uses registers for Parameters])
		arch_target=s390x;
		ACCESS_UNALIGNED="no"
		JIT_SUPPORTED=yes
		;;
esac

AC_ARG_WITH(jit, [  --with-jit=yes,no       If you want to build scripts that default to the JIT],[
	if test x$withval = xyes; then
	   jit_wanted=true
	else
	   jit_wanted=false
	fi
])

AC_ARG_WITH(interp, [  --with-interp=yes,no    If you want to build scripts that default to the interpreter],[
	if test x$withval = xyes; then
	   interp_wanted=true
	else
	   interp_wanted=false
	fi
])

USEJIT=false
if test x$JIT_SUPPORTED = xyes; then
   if $jit_wanted; then
      USEJIT=true
      jit_status="Building and using the JIT"
   else
      if $interp_wanted; then
         jit_status="Building the JIT, defaulting to the interpreter"
      else
         AC_ERROR(No JIT or interpreter support available or selected.)
      fi
   fi
else
   if $interp_wanted; then
      jit_status="interpreter"
   else
      AC_ERROR(No JIT or interpreter support available or selected.)
   fi
fi

AM_CONDITIONAL(USE_JIT, test x$USEJIT = xtrue)

libsuffix=".so"

case "$host" in
     powerpc-*-darwin*)
	libsuffix=".dylib"
	LIBC="libc.dylib"
	INTL="libintl.dylib"
	;;
     *-*-*netbsd*)
	LIBC="libc.so.12"
	INTL="libintl.so.0"
	;;
    *-*-*freebsd*)
    	LIBC="libc.so"
	INTL="libintl.so"
	;;
    *-*-*openbsd*)
    	LIBC="libc.so"
	INTL="libintl.so"
	;;
esac
AC_SUBST(libsuffix)

if test "x$TARGET" != "xAMD64"; then
   # valgrind headers don't compile under x86-64
   AC_CHECK_HEADERS(valgrind/memcheck.h)
fi

if test "x$TARGET" = "xAMD64" -o "x$TARGET" = "xX86"; then
	if test "x$with_tls" = "x__thread"; then
		#
		# On some linux distributions, TLS works in executables, but linking 
		# against a shared library containing TLS fails with:
		# undefined reference to `__tls_get_addr'
		#
		rm -f conftest.c conftest.so conftest
		echo "static __thread int foo; void main () { foo = 5; }" > conftest.c
		gcc -fPIC --shared -o conftest.so conftest.c > /dev/null 2>&1
		gcc -o conftest conftest.so > /dev/null 2>&1
		if test ! -f conftest; then
		   AC_MSG_WARN([Disabling usage of __thread.]);
		   with_tls=pthread
		fi
		rm -f conftest.c conftest.so conftest
	fi
fi

if test "x$with_tls" = "x__thread"; then
	AC_DEFINE(HAVE_KW_THREAD)
   # Pass the information to libgc
	CPPFLAGS="$CPPFLAGS -DUSE_COMPILER_TLS"
	export CPPFLAGS
	AC_MSG_CHECKING(if the tls_model attribute is supported)
	AC_TRY_COMPILE([static __thread int foo __attribute__((tls_model("initial-exec")));], [
		], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_TLS_MODEL_ATTR, 1, [tld_model available])
		], [
			AC_MSG_RESULT(no)
	])
fi

if test ${TARGET} = ARM; then
	dnl ******************************************
	dnl *** Check to see what FPU is available ***
	dnl ******************************************
	AC_MSG_CHECKING(which FPU to use)

	AC_TRY_COMPILE([], [
		__asm__ ("ldfd f0, [r0]");
		], fpu=FPA, [
			AC_TRY_COMPILE([], [
				__asm__ ("fldd d0, [r0]");
			], fpu=VFP, fpu=NONE)
		])

	AC_MSG_RESULT($fpu)
	CPPFLAGS="$CPPFLAGS -DARM_FPU_$fpu"
	unset fpu
fi

if test ${TARGET} = unknown; then
	CPPFLAGS="$CPPFLAGS -DNO_PORT"
	AC_MSG_WARN("mono has not been ported to $host: some things may not work.")
fi

if test ${ACCESS_UNALIGNED} = no; then
	CPPFLAGS="$CPPFLAGS -DNO_UNALIGNED_ACCESS"
fi

PREVIEW=yes
AC_ARG_WITH(preview, [ --with-preview=yes,no     If you want to install the 2.0 FX preview],[
	if test x$with_preview = xno; then
	      PREVIEW=no
	fi
])

AM_CONDITIONAL(INSTALL_2_0, test x$PREVIEW = xyes)

AM_CONDITIONAL(MIPS_GCC, test ${TARGET}${ac_cv_prog_gcc} = MIPSyes)
AM_CONDITIONAL(MIPS_SGI, test ${TARGET}${ac_cv_prog_gcc} = MIPSno)
AM_CONDITIONAL(SPARC, test x$TARGET = xSPARC)
AM_CONDITIONAL(SPARC64, test x$TARGET = xSPARC64)
AM_CONDITIONAL(X86, test x$TARGET = xX86)
AM_CONDITIONAL(AMD64, test x$TARGET = xAMD64)
AM_CONDITIONAL(ALPHA, test x$TARGET = xALPHA)
AM_CONDITIONAL(IA64, test x$TARGET = xIA64)
AM_CONDITIONAL(M68K, test x$TARGET = xM68K)
AM_CONDITIONAL(POWERPC, test x$TARGET = xPOWERPC)
AM_CONDITIONAL(ARM, test x$TARGET = xARM)
AM_CONDITIONAL(S390, test x$TARGET = xS390)
AM_CONDITIONAL(S390x, test x$TARGET = xS390x)
AM_CONDITIONAL(HPPA, test x$TARGET = xHPPA)

AM_CONDITIONAL(JIT_SUPPORTED, test x$JIT_SUPPORTED = xyes)
AM_CONDITIONAL(INTERP_SUPPORTED, test x$interp_wanted = xtrue)
AM_CONDITIONAL(INCLUDED_LIBGC, test x$gc = xincluded)

AC_SUBST(LIBC)
AC_SUBST(INTL)

AC_SUBST(arch_target)
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

mono_build_root=`pwd`
AC_SUBST(mono_build_root)

if test x$USEJIT = xtrue; then
  mono_runtime=mono/mini/mono
else
  mono_runtime=mono/interpreter/mint
fi
AC_SUBST(mono_runtime)

mono_cfg_root=$mono_build_root/runtime
if test x$platform_win32 = xyes; then
  mono_cfg_dir=`cygpath -w -a $mono_cfg_root`\\etc
else
  mono_cfg_dir=$mono_cfg_root/etc
fi
AC_SUBST(mono_cfg_dir)

AC_CONFIG_FILES([runtime/mono-wrapper],[chmod +x runtime/mono-wrapper])
AC_CONFIG_FILES([runtime/monodis-wrapper],[chmod +x runtime/monodis-wrapper])

AC_CONFIG_COMMANDS([runtime/etc/mono/1.0/machine.config],
[   depth=../../../..
    case $srcdir in
    [\\/$]* | ?:[\\/]* ) reldir=$srcdir ;;
    .) reldir=$depth ;;
    *) reldir=$depth/$srcdir ;;
    esac
    $ac_aux_dir/install-sh -d runtime/etc/mono/1.0
    cd runtime/etc/mono/1.0
    rm -f machine.config
    $LN_S $reldir/data/net_1_1/machine.config machine.config
    cd $depth
],[LN_S='$LN_S'])

AC_CONFIG_COMMANDS([runtime/etc/mono/2.0/machine.config],
[   depth=../../../..
    case $srcdir in
    [\\/$]* | ?:[\\/]* ) reldir=$srcdir ;;
    .) reldir=$depth ;;
    *) reldir=$depth/$srcdir ;;
    esac
    $ac_aux_dir/install-sh -d runtime/etc/mono/2.0
    cd runtime/etc/mono/2.0
    rm -f machine.config
    $LN_S $reldir/data/net_2_0/machine.config machine.config
    cd $depth
],[LN_S='$LN_S'])

AC_OUTPUT([
Makefile
mint.pc
mono.pc
scripts/mono-nunit.pc
mono/Makefile
mono/utils/Makefile
mono/metadata/Makefile
mono/dis/Makefile
mono/cil/Makefile
mono/arch/Makefile
mono/os/Makefile
mono/os/win32/Makefile
mono/os/unix/Makefile
mono/arch/x86/Makefile
mono/arch/amd64/Makefile
mono/arch/hppa/Makefile
mono/arch/ppc/Makefile
mono/arch/sparc/Makefile
mono/arch/s390/Makefile
mono/arch/s390x/Makefile
mono/arch/arm/Makefile
mono/arch/alpha/Makefile
mono/interpreter/Makefile
mono/tests/Makefile
mono/tests/tests-config
mono/benchmark/Makefile
mono/monoburg/Makefile
mono/monograph/Makefile
mono/io-layer/Makefile
mono/mini/Makefile
mono/handles/Makefile
mono/profiler/Makefile
ikvm-native/Makefile
scripts/Makefile
man/Makefile
web/Makefile
docs/Makefile
data/Makefile
data/net_1_1/Makefile
data/net_2_0/Makefile
samples/Makefile
support/Makefile
data/config
mono.spec
tools/Makefile
tools/locale-builder/Makefile
runtime/Makefile
])

(
  case $prefix in
  NONE) prefix=/usr/local ;;
  esac
  case $exec_prefix in
  NONE | '${prefix}') exec_prefix=$prefix ;;
  esac

  echo "prefix=$prefix" > $srcdir/$mcsdir/build/config.make
  echo "exec_prefix=$exec_prefix" >> $srcdir/$mcsdir/build/config.make
  echo "mono_libdir=$exec_prefix/lib" >> $srcdir/$mcsdir/build/config.make
  echo 'MCS_FLAGS = $(PLATFORM_DEBUG_FLAGS)' >> $srcdir/$mcsdir/build/config.make
)

libgdiplus_msg=${libgdiplus_loc:-assumed to be installed}

echo "
        mcs source:  $mcs_topdir
	GC:	     $gc
	Globalization:     $enable_glob
	TLS:         $with_tls
	SIGALTSTACK: $with_sigaltstack
	Engine:      $jit_status
	2.0 Alpha:   $PREVIEW
	JNI support: $jdk_headers_found
	libgdiplus:  $libgdiplus_msg
	$disabled

"
