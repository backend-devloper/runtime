* ADO.NET

	The coordinator for the ADO.NET implementation is 
	<a href="mailto:rodrigo@ximian.com">Rodrigo Moya</a>, 
	with the collaboration of: 
	<a href="mailto:danmorg@sc.rr.com">Daniel Morgan</a>, 
	<a href="mailto:tim@timcoleman.com">Tim Coleman</a>,
	<a href="mailto:brianlritchie@hotmail.com">Brian Ritchie</a>, and
	<a href="mailto:vladimir@pobox.com">Vladimir Vukicevic</a>.
	

* Action plan

	<p>The current plan to implement ADO.NET is as follows:

	<ul>
		<li>Either create ADO.NET providers or modify pre-exiting ADO.NET providers to
		work with Mono
		
		<ul>
			<li>Create ADO.NET Providers
			
			<ul>
					<li><a href="http://www.go-mono.com/mysql.html">MySQL</a>
					<li><a href="http://www.go-mono.com/odbc.html">ODBC</a>
					<li><a href="http://www.go-mono.com/oracle.html">Oracle</a>
					<li><a href="http://www.go-mono.com/oledb.html">OLE DB</a>
					<li><a href="http://www.go-mono.com/postgresql.html">PostgreSQL</a>
					<li><a href="http://www.go-mono.com/sqlclient.html">Microsoft SQL Server</a>
					<li><a href="http://www.go-mono.com/sqlite.html">SQL Lite</a>
					<li><a href="http://www.go-mono.com/sybase.html">Sybase</a>
					<li><a href="http://www.go-mono.com/tdsclient.html">TDS Generic</a>
					<li>Providers which we do not have, but we would like to have.  Currently,
					some of these databases are supported via the ODBC or OLEDB providers.
					<ul>
						<li><a href="http://www-3.ibm.com/software/data/db2/">IBM DB2 Universal Database</a>
						<li><a href="http://www.hughes.com.au/">miniSQL</a></li>
						<li><a href="http://www.sleepycat.com/">BerkeleyDB (Sleepycat)</a></li>
						<li><a href="http://www.sapdb.org/">SapDB</a></li>
						<li>Microsoft Access - could be done by creating C# bindings to <a href="http://mdbtools.sourceforge.net">MDB Tools</a></li>
						<li>dbase or xbase type database files</li>
						<li>Others are welcome</li>
					</ul>
				</ul>
				<br>
			<li>Modify Pre-existing ADO.NET Providers to work with Mono.  This may
			require fixing or implementing areas of Mono too.
				<ul>
					<li><a href="http://www.go-mono.com/firebird.html">Firebird Interbase</a></li>
					<li><a href="http://gborg.postgresql.org/project/npgsql/projdisplay.php">Npgsql</a> is a PostgreSQL Managed data provider written 
					in 100% C# and does not require a client library </li>
					<li><a href="http://sourceforge.net/projects/mysqlnet/">MySQLNet</a> is a MySQL Manager data provider written in 100% C# and does not
					require a client library</li>
					<li><a href="http://sourceforge.net/projects/mysqldrivercs/">MySQLDriverCS</a> is a MySQL data provider written in C#</li>
					
				</ul>
			</li>
		</ul>
	<br>
	<li>Create Tools for Configuration, Testing, and Entering SQL Queries  
	<ul>
		<li><b>SQL# CLI - a command-line tool</b> written in C# to 
		  execute SQL commands,
		  test connection strings, and connect to various ADO.NET
		  providers in Mono.  The SQL# CLI can be found in
		  mcs/tools/SqlSharp/SqlSharpCli.cs</li>
		<li><p><b>SQL# GUI - a GUI tool</b> written in C# to 
		  execute SQL commands. 
		  Currently, there is SQL# For GTK# which
		  can be found at 
		  mcs/tools/SqlSharp/gui/gtk-sharp  
		  It has a SQL editor with 
		  syntax hi lighting of SQL keywords</li>
		<li><b>Configuration Command-Line and GUI Tools for ADO.NET</b>.  
		  These tools have not been started.  The tools would be written in
		  C# and run on Mono. The
		  configuration tool can be used to do the following:
		  <ul> 
			<li>setup DSNs for the ODBC and OLE-DB
				providers and configurations for 
				their underlying libraries (unixODBC and libgda)</li>
		    <li>setup configurations for the Mono.Data.ProviderFactory
				that Brian Ritchie created</li>
		    <li>setup native database client library configurations too, such as,
				freetds.conf for Microsoft SQL Server and Sybase</li>
		  </ul>
		</li>
	</ul>
</ul>
	
* Current Status

	<p>Variouls ADO.NET Providers have been created: PostgreSQL, MySQL, Sybase, SQL Lite,
	Microsoft SQL Server, OLE DB, ODBC, and TDS Generic.  See their respective web page for
	more information.
		
	<p><b>DataSet, DataAdaptor, DataTable, DataRelation, DataRow, DataColumn,
	DataColumnCollection, DataRowCollection, and others</b> need more work.  There are
	many classes that are just stubs and need to be implemented.  

	<p><b>XML support in System.Data</b> needs work.  This involves working on
	the classes: DataSet, XmlDataDocument, and the method ExecuteXmlReader() that
	exists in a provider's class that implements IDbCommand, and others.
	Stuart Caborn has started the XML support in a DataSet.  Tim Coleman started
	XML support in the ExecuteXmlReader() in a SqlCommand.
	
	<p><b>ADO.NET Provider Factory</b> has been started by Brian Ritchie.  The 
	Provider Factory is used to dynamically create
	connections, commands, parameters, and data adapters based on configuration information.  This
	provider factory can also provide utility functions needed by a lot of 
	providers but are not exposed via the provider.
		
	<p><b>Integration with ASP.NET</b> has not been started, such as, data binding
	to a System.Web.UI.WebControls.DataGrid.  This may involve implementing many classes
	in System.Web and System.Data.  Gonzalo, Gaurav, Leen, Patrik, Duncan, and others are 
	working very hard on the ASP.NET support. If you want to help, 
	contact <a href="mailto:gonzalo@ximian.com">Gonzalo Paniagua Javier</a>
	
	<p><b>Integration with Windows.Forms</b> has not been started, such as, data binding 
	to a System.Windows.Forms.DataGrid.  This may involve implementing many classes
	in System.Windows.Forms and System.Data.
	
	<p><b>Integration with <a href="http://gtk-sharp.sourceforge.net/">GTK#</a></b> 
	has not been started, such as, data binding
	to a GtkTreeView.  This may involve creating new classes
	to go between the glist data model and the ADO.NET data model.
	Mike Kestner would be the best person to ask for help on GTK#.
	
	<p><b>Integration with QT#</b> has not been started.  Any information on 
	how this can be done is appreciated.  Adam Treat would be the best 
	person to ask about QT#.
	
	<p><b>Integration with GDA#</b> has not been started.  It is 
	included in the GTK# project, GDA# 
	does not require GTK+ nor GNOME.  GDA# is C# bindings 
	to <a href="http://www.gnome-db.org/">GDA</a> which
	is an ADO/OLE-DB like layer for Linux provided as a C library.  Classes
	that would bind data between the ADO.NET data model and the GDA data model will
	need to be created.  Rodrigo Moya is the best person to contact about this.
	
	<p><b>Integration with GnomeDb#</b> has not been started.  It is
	included in the GTK# project and uses GDA# for its data access model.
	Creating classes to bind data between the data model in ADO.NET 
	and the data model that	exists in GDA# and GnomeDb# will
	need to be started.  GnomeDb# is C# bindings to
	<a href="http://www.gnome-db.org/">GnomeDb</a> which uses 
	<a href="http://www.gnome-db.org/">GDA</a> as its data access layer.  GnomeDb
	is a C API in a library that contains
	gtk+ widgets (GUI controls) for data access.  There are some nifty widgets
	(GUI controls) that can be used, such as, GnomeDbGrid, GnomeDbBrowswer, 
	GnomeDbSqlEditor, GnomeDbList, GnomeDbLogin, GnomeDbReportEditor, GnomeDbTableEditor, 
	GnomeDbCombo, and GnomeDbForm.  Rodrigo Moya is the best person to contact.	
	
	<p><b>Building System.Data</b>
	
	<p>The System.Data.dll gets built with the rest of the class library.
	To compile the System.Data.dll assembly separately, you need:

	<b>On Unix</b>

	<ul>
		* update your mono sources. Be sure you have latest mcs.exe
		  and .dll's, since there have been many fixes needed for
		  compilation on Linux.

		* compile System.Data.dll:
<pre>
 cd mcs/class/System.Data<br>
 mcs --target library -o \
    System.Data.dll @list
</pre>
	</ul>

	<b>On Windows</b>

	<ul>
		* update your mono sources. Be sure you have latest mcs.exe
		  and .dll's.  You can use the same method as Linux, 
		  or you can use NAnt.

		* To use NAnt:

<pre>
 cd mcs/class/System.Data
 ../../nant/NAnt.exe
</pre>
			
		* This will automatically copy the System.Data.dll to Test.
		  If you need to do a clean for the System.Data.dll assembly,<br><br>

<pre>
 cd mcs/class/System.Data
 ../../nant/NAnt.exe clean 
</pre>
	</ul>

