* Oracle Data Provider

<ul>
	<li>ADO.NET Data Provider for <a href="http://www.oracle.com/">Oracle</a> databases</li>
	<li>Exists in namespace System.Data.OracleClient and assembly System.Data.OracleClient</li>
	<li>Works on Windows and Linux</li>
	<li>Works with Oracle 8i</li>
	<li>Uses the Oracle CLI (Call Level Interface) which is a C library (API) for the Oracle Client 
		software</li>
	<li>Internally, the OracleClient provider has OCI abstracted to an object-oriented programming model</li>
	<li>Created by Daniel Morgan and Tim Coleman</li>
	<li>Does not support trusted connections</li>
</ul>
	
** Current Status

<ul>
	<li>OracleConnection can connect and disconnect to an Oracle 8i database on 
	Windows and Linux via OCI (Oracle Call-level Interface)</li>
	
	<li>No longer uses a glue library (a library between the System.Data.OracleClient.dll
	assembly and the oci library).  In Current Mono cvs, System.Data.OracleClient 
	directly platform invokes into the oci library thanks to Tim Coleman.</li>
	
	<li>Can execute simple DML SQL statements, such as, 
	INSERT a row into the EMP table via the OracleCommand's ExecuteNonQuery method</li>
	
	<li>The System.Data.OracleClient.dll assembly can be built with mcs/mono via
	the makefile.gnu for System.Data.OracleClient or csc/.net via the
	System.Data.OracleClient.build nant build file.</li>
	
	<li>Can NOT retrieve data yet.  ExecuteReader() and ExecuteScalar() in OracleCommand
	and OracleDataReader need to be implemented.</li>
	
	<li>Lots of missing functionality and bugs.</li>
	
	<li>Error handling has been started.</li>
	   
</ul>
	
** Action Plan

<ul>
	<li>Be able to retrieve results via a data reader</li>
	<li>Parameters support</li>
	<li>transactions</li>
	<li>Stored Procedures, Functions, and Packages support</li>
	<li>Be able to fill a DataTable in a DataSet via a data adapter</li>
	<li>Support for Oracle 8i and 9i</li>
	<li>Support LOBs</li>
	<li>Support all the data types</li>
	<li>Implement Connection pooling</li>
	<li>Security</li>
	
</ul>

** Testing System.Data.OracleClient

<ul>
	<li>Have a working mono and mcs</li>
	
	<li>Have access to an Oracle 8i database or download it from
	<a href="http://www.oracle.com/">Oracle</a>.  If you are connecting
	remotely to an Oracle database, you need the Oracle client software.
	Registration to the	Oracle Technology Network is free.  If installing on Linux, 
	I suggest you do a lot of searching to see how others installed Oracle on Linux.</li>
	
	<li>Make sure System.Data.OracleClient.dll assembly is built, if not, go
	into System.Data.OracleClient and do a make -f makefile.gnu (on Linux) or
	../../nant/NAnt.exe (on Windows using Cygwin).</li>
	
	<li>Take a look at TestOracleClient.cs found at mcs/class/System.Data.OracleClient/Test</li>
	
	<li>The Data Source is an Oracle TNSNAME</li>
	
	<li>Has a connection string format:
<pre>
"Data Source=tnsname;User ID=userid;Password=password"
</pre>	
	</li>
	<li>C# Example:
<pre>
 using System;
 using System.Data;
 using System.Data.OracleClient;
 
 public class Test 
 {
    public static void Main(string[] args)
    {
       string connectionString = 
          "Data Source=testdb;" +
          "User ID=scott;" +
          "Password=tiger;";
       IDbConnection dbcon;
       dbcon = new OracleConnection(connectionString);
       IDbCommand dbcmd = dbcon.CreateCommand();
       string sql =
              "insert into scott.emp " +
              "(empno, ename, job, sal, deptno) " +
              "values(123," +
              "'Don Smith'," +
              "'Cook'," +
              "23021," +
              "20)";
       dbcmd.CommandText = sql;
       dbcmd.ExecuteNonQuery();
       dbcmd.Dispose();
       dbcmd = null;
       dbcon.Close();
       dbcon = null;
    }
 }
</pre>
	</li>
	<li>Building C# Example:
	<ul>
		<li>Save the example to a file, such as, TestExample.cs</li>
		<li>Build on Linux:
<pre>
	mcs TestExample.cs -r System.Data.dll \
	    -r System.Data.OracleClient.dll
</pre>
		</li>
		<li>Build on Windows via Cygwin:
<pre>
	mono C:/cygwin/home/MyHome/mono/install/bin/mcs.exe \
	     TestExample.cs \
	     -lib:C:/cygwin/home/MyHome/mono/install/lib \
	     -r System.Data.dll -r System.Data.OracleClient.dll
</pre>
		</li>
	</ul>
	</li>
	<li>Running the Example:
<pre>
mono TestExample.exe
</pre>
	</li>

</ul>

