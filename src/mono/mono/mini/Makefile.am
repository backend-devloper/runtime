count=100000
mtest=for_loop
monodir=$(top_builddir)

# This is needed for automake dependency generation
if INCLUDED_LIBGC
libgc_libs=$(monodir)/libgc/libmonogc.la
libgc_static_libs=$(monodir)/libgc/libmonogc-static.la
else
libgc_libs=$(LIBGC_LIBS)
libgc_static_libs=$(LIBGC_STATIC_LIBS)
endif

libs=	\
	$(monodir)/mono/metadata/libmonoruntime.la	\
	$(monodir)/mono/io-layer/libwapi.la	\
	$(monodir)/mono/utils/libmonoutils.la \
	$(GMODULE_LIBS)	\
	$(GLIB_LIBS)	\
	$(libgc_libs)	\
	$(ICU_LIBS)

static_libs=	\
	$(monodir)/mono/metadata/libmonoruntime-static.la	\
	$(monodir)/mono/io-layer/libwapi.la	\
	$(monodir)/mono/utils/libmonoutils.la \
	$(GMODULE_LIBS)	\
	$(GLIB_LIBS)	\
	$(libgc_static_libs) \
	$(ICU_LIBS)

CLASS1=$(mcs_topdir)/class/lib/default
CLASS2=$(mcs_topdir)/class/lib/net_2_0

RUNTIME = MONO_PATH=$(CLASS1) $(top_builddir)/runtime/mono-wrapper
RUNTIME2 = MONO_PATH=$(CLASS2) $(top_builddir)/runtime/mono-wrapper

MCS = $(RUNTIME) $(CLASS1)/mcs.exe -unsafe -nowarn:0162
GMCS = $(RUNTIME2) $(CLASS2)/gmcs.exe -unsafe -nowarn:0162
ILASM = $(RUNTIME) $(CLASS1)/ilasm.exe


AM_CFLAGS = \
	-I$(top_srcdir) 	\
	$(LIBGC_CFLAGS)		\
	$(GMODULE_CFLAGS)		\
	$(GLIB_CFLAGS)
	$(PLATFORM_CFLAGS) $(ARCH_CFLAGS)

if PLATFORM_WIN32
export HOST_CC
# The mingw math.h has "extern inline" functions that dont appear in libs, so
# optimisation is required to actually inline them
PLATFORM_CFLAGS = -O
endif

# hack for automake to have the same source file in a library and a bin
genmdesc_CFLAGS = $(AM_CFLAGS)

if NO_VERSION_SCRIPT
monoldflags=
monobinldflags=
else
monoldflags=-Wl,-version-script=$(srcdir)/ldscript
monobinldflags=-Wl,-version-script=$(srcdir)/ldscript.mono
endif

if PLATFORM_WIN32
libmono_la_LDFLAGS=-no-undefined -version-info 1:0:0 $(monoldflags)
else
libmono_la_LDFLAGS=$(monoldflags)
endif

if JIT_SUPPORTED
bin_PROGRAMS = mono

noinst_PROGRAMS = genmdesc

#lib_LTLIBRARIES = libmono.la
#noinst_LTLIBRARIES = libmono-static.la
endif

mono_SOURCES = \
	$(common_sources) $(arch_sources) main.c inssel.c inssel.h

if STATIC_MONO
# Link libmono into mono statically
# This leads to higher performance, especially with TLS
MONO_LIB=libmono-static.la
else 
MONO_LIB=libmono.la
endif

mono_LDADD = \
	$(static_libs)			\
	$(GLIB_LIBS)		\
	$(GMODULE_LIBS) -lm	\
	$(ICU_LIBS)

mono_LDFLAGS = \
	$(static_flags) -export-dynamic $(monobinldflags)

genmdesc_SOURCES = \
	mini.h		\
	genmdesc.c	\
	helpers.c

# Don't link this against libmonoruntime to speed up rebuilds
genmdesc_LDADD = \
	$(monodir)/mono/utils/libmonoutils.la $(monodir)/mono/metadata/opcodes.lo -lm	\
	$(GLIB_LIBS)		\
	$(GMODULE_LIBS)

x86_sources = \
	mini-x86.c		\
	mini-x86.h		\
	exceptions-x86.c	\
	tramp-x86.c			\
	mini-codegen.c		\
	mini-trampolines.c

amd64_sources = \
	mini-amd64.c		\
	mini-amd64.h		\
	exceptions-amd64.c	\
	tramp-amd64.c		\
	mini-codegen.c		\
	mini-trampolines.c

ppc_sources = \
	mini-ppc.c		\
	mini-ppc.h		\
	exceptions-ppc.c	\
	tramp-ppc.c

arm_sources = \
	mini-arm.c		\
	mini-arm.h		\
	exceptions-arm.c	\
	tramp-arm.c		\
	mini-codegen.c

sparc_sources = \
	mini-sparc.c		\
	mini-sparc.h		\
	exceptions-sparc.c	\
	tramp-sparc.c		\
	mini-codegen.c		\
	mini-trampolines.c

s390_sources = \
	mini-s390.c		\
	mini-s390.h		\
	exceptions-s390.c	\
	mini-codegen.c		\
	tramp-s390.c

s390x_sources = \
	mini-s390x.c		\
	mini-s390x.h		\
	exceptions-s390x.c	\
	mini-codegen.c		\
	tramp-s390x.c

ia64_sources = \
	mini-ia64.c			\
	mini-ia64.h			\
	exceptions-ia64.c	\
	tramp-ia64.c		\
	mini-codegen.c		\
	mini-trampolines.c

common_sources = \
	mini.c		\
	mini.h		\
	jit-icalls.h \
	jit-icalls.c \
	trace.c		\
	trace.h		\
	mini-ops.h	\
	mini-arch.h	\
	dominators.c	\
	cfold.c		\
	regalloc.c	\
	regalloc.h	\
	helpers.c	\
	liveness.c	\
	ssa.c		\
	abcremoval.c	\
	abcremoval.h	\
	ssapre.c	\
	ssapre.h	\
	aliasing.c	\
	aliasing.h	\
	local-propagation.c	\
	ssapre-cee-ops.h \
	ssapre-mini-ops.h \
	driver.c	\
	debug-mini.c	\
	linear-scan.c	\
	aot-compiler.c		\
	aot-runtime.c		\
	graph.c		\
	mini-exceptions.c	\
	declsec.c	\
	declsec.h	\
	wapihandles.c	\
	branch-opts.c

test_sources = 		\
	basic-calls.cs 	\
	basic-long.cs 	\
	bench.cs 		\
	objects.cs 		\
	arrays.cs		\
	basic-float.cs	\
	basic-math.cs	\
	basic.cs		\
	exceptions.cs	\
	iltests.il		\
	test.cs

test_sources2 = generics.2.cs

if MONO_DEBUGGER_SUPPORTED
mono_debugger_sources = debug-debugger.c debug-debugger.h
else
mono_debugger_sources =
endif

regtests=basic.exe arrays.exe basic-float.exe basic-math.exe basic-long.exe objects.exe basic-calls.exe iltests.exe exceptions.exe bench.exe
regtests2=generics.exe
common_BURGSRC= $(srcdir)/inssel.brg $(srcdir)/inssel-float.brg

if X86
arch_sources = \
	$(x86_sources) $(mono_debugger_sources)
arch_BURGSRC= $(srcdir)/inssel-long32.brg $(srcdir)/inssel-x86.brg
arch_built=cpu-pentium.h
endif

if AMD64
arch_sources = \
	$(amd64_sources) $(mono_debugger_sources)
arch_BURGSRC= $(srcdir)/inssel-long.brg $(srcdir)/inssel-amd64.brg
arch_built=cpu-amd64.h
endif

if POWERPC
arch_sources = \
	$(ppc_sources)
arch_BURGSRC= $(srcdir)/inssel-long32.brg $(srcdir)/inssel-ppc.brg
arch_built=cpu-g4.h
endif

if ARM

# pick up arm_dpimacros.h and arm_fpamacros.h
ARCH_CFLAGS = -I../arch/arm

arch_sources = $(arm_sources)

arch_BURGSRC= $(srcdir)/inssel-long32.brg $(srcdir)/inssel-arm.brg
arch_built=cpu-arm.h
endif

if SPARC
arch_sources = \
	$(sparc_sources)

arch_BURGSRC= $(srcdir)/inssel-long32.brg $(srcdir)/inssel-sparc.brg
arch_built=cpu-sparc.h
endif

if SPARC64
arch_sources = \
	$(sparc_sources)

arch_BURGSRC= $(srcdir)/inssel-long.brg $(srcdir)/inssel-sparc.brg
arch_built=cpu-sparc.h
endif

if S390
arch_sources = \
	$(s390_sources)

arch_BURGSRC= $(srcdir)/inssel-long32.brg $(srcdir)/inssel-s390.brg
arch_built=cpu-s390.h
endif

if S390x
arch_sources = \
	$(s390x_sources)

arch_BURGSRC= $(srcdir)/inssel-long.brg $(srcdir)/inssel-s390x.brg
arch_built=cpu-s390x.h
endif

if IA64
arch_sources = \
    $(ia64_sources)

arch_BURGSRC = $(srcdir)/inssel-long.brg $(srcdir)/inssel-ia64.brg
arch_built = cpu-ia64.h
endif

libmono_la_SOURCES = $(common_sources) $(arch_sources)

nodist_libmono_la_SOURCES = inssel.c inssel.h

libmono_static_la_SOURCES = $(libmono_la_SOURCES)
nodist_libmono_static_la_SOURCES = $(nodist_libmono_la_SOURCES)
libmono_static_la_LDFLAGS = -static
libmono_static_la_LIBADD = $(static_libs)

BURGSRC= $(common_BURGSRC) $(arch_BURGSRC)

libmonoincludedir = $(includedir)/mono/jit

libmonoinclude_HEADERS = jit.h

libmono_la_LIBADD = \
	$(libs)

%.exe: %.2.cs TestDriver.dll
	$(GMCS) -out:$@ $< -r:TestDriver.dll 

%.exe: %.cs TestDriver.dll
	$(MCS) -out:$@ -unsafe $< -r:TestDriver.dll

%.exe: %.il
	$(ILASM) -output=$@ $<

TestDriver.dll: $(srcdir)/TestDriver.cs
	$(MCS) -out:$@ -target:library $<

if CROSS_COMPILING

cpu-pentium.h: cpu-pentium.md
cpu-amd64.h: cpu-amd64.md
cpu-g4.h: cpu-g4.md
cpu-arm.h: cpu-arm.md
cpu-sparc.h: cpu-sparc.md
cpu-s390.h: cpu-s390.md
cpu-s390x.h: cpu-s390x.md
cpu-ia64.h: cpu-ia64.md

## Gross hack.  Making 'genmdesc' a host binary takes more effort
$(arch_built):
	echo "*** please build $(arch_built) on a native build tree and copy it here"
	exit 1

else !CROSS_COMPILING

cpu-pentium.h: cpu-pentium.md genmdesc$(EXEEXT)
	./genmdesc $(srcdir)/cpu-pentium.md cpu-pentium.h pentium_desc

cpu-amd64.h: cpu-amd64.md genmdesc$(EXEEXT)
	./genmdesc $(srcdir)/cpu-amd64.md cpu-amd64.h amd64_desc

cpu-g4.h: cpu-g4.md genmdesc$(EXEEXT)
	./genmdesc $(srcdir)/cpu-g4.md cpu-g4.h ppcg4

cpu-arm.h: cpu-arm.md genmdesc$(EXEEXT)
	./genmdesc $(srcdir)/cpu-arm.md cpu-arm.h arm_cpu_desc

cpu-sparc.h: cpu-sparc.md genmdesc$(EXEEXT)
	./genmdesc $(srcdir)/cpu-sparc.md cpu-sparc.h sparc_desc

cpu-s390.h: cpu-s390.md genmdesc$(EXEEXT)
	./genmdesc $(srcdir)/cpu-s390.md cpu-s390.h s390_cpu_desc

cpu-s390x.h: cpu-s390x.md genmdesc$(EXEEXT)
	./genmdesc $(srcdir)/cpu-s390x.md cpu-s390x.h s390x_cpu_desc

cpu-ia64.h: cpu-ia64.md genmdesc$(EXEEXT)
	./genmdesc $(srcdir)/cpu-ia64.md cpu-ia64.h ia64_desc

endif !CROSS_COMPILING

inssel.c inssel.h: $(BURGSRC)
	$(monodir)/mono/monoburg/monoburg -c 1 -p -e $(BURGSRC) -d inssel.h -s inssel.c

testi: mono test.exe
	$(RUNTIME) -v -v --ncompile 1 --compile Test:$(mtest) test.exe

# ensure the tests are actually correct
checktests: $(regtests)
	for i in $(regtests); do $(RUNTIME) $$i; done

checktests2: $(regtests2)
	for i in $(regtests); do $(RUNTIME2) $$i; done

rcheck: mono $(regtests) $(regtests2)
	$(RUNTIME) --regression $(regtests)
	$(RUNTIME2) --regression $(regtests2)

aotcheck: mono $(regtests)
	for i in $(regtests); do $(RUNTIME) --aot $$i; done
	for i in $(regtests2); do $(RUNTIME2) --aot $$i; done
	$(RUNTIME) --verbose --regression $(regtests)
	$(RUNTIME2) --verbose --regression $(regtests2)
	rm -f *.exe.so

bench: mono test.exe
	time env $(RUNTIME) --ncompile $(count) --compile Test:$(mtest) test.exe

mbench: test.exe
	time $(monodir)/mono/jit/mono --ncompile $(count) --compile Test:$(mtest) test.exe

stat1: mono bench.exe
	$(RUNTIME) --verbose --statfile stats.pl --regression bench.exe
	perl viewstat.pl stats.pl

stat2: mono basic.exe
	$(RUNTIME) --verbose --statfile stats.pl --regression basic.exe
	perl viewstat.pl -e stats.pl

stat3: mono bench.exe
	$(RUNTIME) --statfile stats.pl --ncompile 1000 --compile Tests:test_0_many_nested_loops bench.exe 
	perl viewstat.pl stats.pl

docu: mini.sgm
	docbook2txt mini.sgm

check-local: rcheck

clean-local:
	rm -f mono a.out gmon.out *.o test.exe

pkgconfigdir = $(libdir)/pkgconfig

if JIT_SUPPORTED
BUILT_SOURCES= inssel.c inssel.h $(arch_built)
endif

CLEANFILES= $(BUILT_SOURCES) *.exe *.dll
EXTRA_DIST = $(common_BURGSRC) cprop.c TestDriver.cs ldscript ldscript.mono \
	$(test_sources) $(test_sources2) \
	inssel-long.brg inssel-long32.brg \
	$(x86_sources) inssel-x86.brg cpu-pentium.md \
	$(amd64_sources) inssel-amd64.brg cpu-amd64.md \
	$(ppc_sources) inssel-ppc.brg cpu-g4.md \
	$(arm_sources) inssel-arm.brg cpu-arm.md \
	$(sparc_sources) inssel-sparc.brg cpu-sparc.md \
	$(s390_sources) inssel-s390.brg cpu-s390.md \
	$(s390x_sources) inssel-s390x.brg cpu-s390x.md \
	$(ia64_sources) inssel-ia64.brg cpu-ia64.md
