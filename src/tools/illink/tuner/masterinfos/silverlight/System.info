<?xml version="1.0"?>
<assemblies>
  <assembly name="System" version="2.1.0.0">
    <attributes>
      <attribute name="System.Reflection.AssemblyTitleAttribute" />
      <attribute name="System.Runtime.InteropServices.ComVisibleAttribute" />
      <attribute name="System.Reflection.AssemblyDescriptionAttribute" />
      <attribute name="System.CLSCompliantAttribute" />
      <attribute name="System.Diagnostics.DebuggableAttribute" />
      <attribute name="System.Runtime.CompilerServices.CompilationRelaxationsAttribute" />
      <attribute name="System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
        <properties>
          <property name="WrapNonExceptionThrows" value="True" />
        </properties>
      </attribute>
      <attribute name="System.Resources.SatelliteContractVersionAttribute" />
      <attribute name="System.Reflection.AssemblyInformationalVersionAttribute" />
      <attribute name="System.Reflection.AssemblyDefaultAliasAttribute" />
      <attribute name="System.Reflection.AssemblyDelaySignAttribute" />
      <attribute name="System.Resources.NeutralResourcesLanguageAttribute" />
      <attribute name="System.Reflection.AssemblyFileVersionAttribute" />
      <attribute name="System.Reflection.AssemblyKeyFileAttribute" />
      <attribute name="System.Reflection.AssemblyCopyrightAttribute" />
      <attribute name="System.Reflection.AssemblyProductAttribute" />
      <attribute name="System.Reflection.AssemblyCompanyAttribute" />
    </attributes>
    <namespaces>
      <namespace name="System">
        <classes>
          <class name="FileStyleUriParser" type="class" base="System.UriParser" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="FtpStyleUriParser" type="class" base="System.UriParser" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="GenericUriParser" type="class" base="System.UriParser" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.GenericUriParserOptions)" attrib="6278">
                <parameters>
                  <parameter name="options" position="0" attrib="0" type="System.GenericUriParserOptions" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="GenericUriParserOptions" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <fields>
              <field name="AllowEmptyAuthority" attrib="32854" fieldtype="System.GenericUriParserOptions" value="2" />
              <field name="Default" attrib="32854" fieldtype="System.GenericUriParserOptions" value="0" />
              <field name="DontCompressPath" attrib="32854" fieldtype="System.GenericUriParserOptions" value="128" />
              <field name="DontConvertPathBackslashes" attrib="32854" fieldtype="System.GenericUriParserOptions" value="64" />
              <field name="DontUnescapePathDotsAndSlashes" attrib="32854" fieldtype="System.GenericUriParserOptions" value="256" />
              <field name="GenericAuthority" attrib="32854" fieldtype="System.GenericUriParserOptions" value="1" />
              <field name="Idn" attrib="32854" fieldtype="System.GenericUriParserOptions" value="512" />
              <field name="IriParsing" attrib="32854" fieldtype="System.GenericUriParserOptions" value="1024" />
              <field name="NoFragment" attrib="32854" fieldtype="System.GenericUriParserOptions" value="32" />
              <field name="NoPort" attrib="32854" fieldtype="System.GenericUriParserOptions" value="8" />
              <field name="NoQuery" attrib="32854" fieldtype="System.GenericUriParserOptions" value="16" />
              <field name="NoUserInfo" attrib="32854" fieldtype="System.GenericUriParserOptions" value="4" />
            </fields>
          </class>
          <class name="HttpStyleUriParser" type="class" base="System.UriParser" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="Uri" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="SchemeDelimiter" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeFile" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeFtp" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeGopher" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeHttp" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeHttps" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeMailto" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeNetPipe" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeNetTcp" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeNews" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeNntp" attrib="54" fieldtype="System.String" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Uri, System.String)" attrib="6278">
                <parameters>
                  <parameter name="baseUri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="relativeUri" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Uri, System.Uri)" attrib="6278">
                <parameters>
                  <parameter name="baseUri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="relativeUri" position="1" attrib="0" type="System.Uri" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="uriString" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.UriKind)" attrib="6278">
                <parameters>
                  <parameter name="uriString" position="0" attrib="0" type="System.String" />
                  <parameter name="uriKind" position="1" attrib="0" type="System.UriKind" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AbsolutePath" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_AbsolutePath()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="AbsoluteUri" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_AbsoluteUri()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DnsSafeHost" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_DnsSafeHost()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Fragment" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Fragment()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Host" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Host()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsAbsoluteUri" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_IsAbsoluteUri()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsUnc" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_IsUnc()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LocalPath" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_LocalPath()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OriginalString" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_OriginalString()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Port" attrib="0" ptype="System.Int32" params="">
                <methods>
                  <method name="get_Port()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Query" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Query()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Scheme" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Scheme()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UserEscaped" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_UserEscaped()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UserInfo" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_UserInfo()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CheckSchemeName(System.String)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="schemeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Compare(System.Uri, System.Uri, System.UriComponents, System.UriFormat, System.StringComparison)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="uri1" position="0" attrib="0" type="System.Uri" />
                  <parameter name="uri2" position="1" attrib="0" type="System.Uri" />
                  <parameter name="partsToCompare" position="2" attrib="0" type="System.UriComponents" />
                  <parameter name="compareFormat" position="3" attrib="0" type="System.UriFormat" />
                  <parameter name="comparisonType" position="4" attrib="0" type="System.StringComparison" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="198" virtual="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Security.SecuritySafeCriticalAttribute" />
                </attributes>
                <parameters>
                  <parameter name="comparand" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="FromHex(System.Char)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="digit" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="GetComponents(System.UriComponents, System.UriFormat)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="components" position="0" attrib="0" type="System.UriComponents" />
                  <parameter name="format" position="1" attrib="0" type="System.UriFormat" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsHexDigit(System.Char)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="character" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="MakeRelativeUri(System.Uri)" attrib="134" returntype="System.Uri">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="op_Equality(System.Uri, System.Uri)" attrib="2198" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="uri1" position="0" attrib="0" type="System.Uri" />
                  <parameter name="uri2" position="1" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="op_Inequality(System.Uri, System.Uri)" attrib="2198" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="uri1" position="0" attrib="0" type="System.Uri" />
                  <parameter name="uri2" position="1" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" returntype="System.String">
                <parameters />
              </method>
              <method name="TryCreate(System.Uri, System.Uri, out System.Uri&amp;)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="baseUri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="relativeUri" position="1" attrib="0" type="System.Uri" />
                  <parameter name="result" position="2" attrib="2" type="System.Uri&amp;" direction="out" />
                </parameters>
              </method>
              <method name="TryCreate(System.String, System.UriKind, out System.Uri&amp;)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="uriString" position="0" attrib="0" type="System.String" />
                  <parameter name="uriKind" position="1" attrib="0" type="System.UriKind" />
                  <parameter name="result" position="2" attrib="2" type="System.Uri&amp;" direction="out" />
                </parameters>
              </method>
              <method name="TryCreate(System.Uri, System.String, out System.Uri&amp;)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="baseUri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="relativeUri" position="1" attrib="0" type="System.String" />
                  <parameter name="result" position="2" attrib="2" type="System.Uri&amp;" direction="out" />
                </parameters>
              </method>
              <method name="UnescapeDataString(System.String)" attrib="150" static="true" returntype="System.String">
                <attributes>
                  <attribute name="System.Security.SecuritySafeCriticalAttribute" />
                </attributes>
                <parameters>
                  <parameter name="stringToUnescape" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="UriBuilder" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String, System.String, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="scheme" position="0" attrib="0" type="System.String" />
                  <parameter name="host" position="1" attrib="0" type="System.String" />
                  <parameter name="portNumber" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.Int32, System.String)" attrib="6278">
                <parameters>
                  <parameter name="scheme" position="0" attrib="0" type="System.String" />
                  <parameter name="host" position="1" attrib="0" type="System.String" />
                  <parameter name="port" position="2" attrib="0" type="System.Int32" />
                  <parameter name="pathValue" position="3" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.Int32, System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="scheme" position="0" attrib="0" type="System.String" />
                  <parameter name="host" position="1" attrib="0" type="System.String" />
                  <parameter name="port" position="2" attrib="0" type="System.Int32" />
                  <parameter name="path" position="3" attrib="0" type="System.String" />
                  <parameter name="extraValue" position="4" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="schemeName" position="0" attrib="0" type="System.String" />
                  <parameter name="hostName" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Uri)" attrib="6278">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Fragment" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Fragment()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Fragment(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Host" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Host()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Host(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Password" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Password()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Password(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Path" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Path()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Path(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Port" attrib="0" ptype="System.Int32" params="">
                <methods>
                  <method name="get_Port()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Port(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Query" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Query()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Query(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Scheme" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Scheme()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Scheme(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Uri" attrib="0" ptype="System.Uri" params="">
                <methods>
                  <method name="get_Uri()" attrib="2182" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UserName" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_UserName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_UserName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="rparam" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="UriComponents" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <fields>
              <field name="AbsoluteUri" attrib="32854" fieldtype="System.UriComponents" value="127" />
              <field name="Fragment" attrib="32854" fieldtype="System.UriComponents" value="64" />
              <field name="Host" attrib="32854" fieldtype="System.UriComponents" value="4" />
              <field name="HostAndPort" attrib="32854" fieldtype="System.UriComponents" value="132" />
              <field name="HttpRequestUrl" attrib="32854" fieldtype="System.UriComponents" value="61" />
              <field name="KeepDelimiter" attrib="32854" fieldtype="System.UriComponents" value="1073741824" />
              <field name="Path" attrib="32854" fieldtype="System.UriComponents" value="16" />
              <field name="PathAndQuery" attrib="32854" fieldtype="System.UriComponents" value="48" />
              <field name="Port" attrib="32854" fieldtype="System.UriComponents" value="8" />
              <field name="Query" attrib="32854" fieldtype="System.UriComponents" value="32" />
              <field name="Scheme" attrib="32854" fieldtype="System.UriComponents" value="1" />
              <field name="SchemeAndServer" attrib="32854" fieldtype="System.UriComponents" value="13" />
              <field name="SerializationInfoString" attrib="32854" fieldtype="System.UriComponents" value="-2147483648" />
              <field name="StrongAuthority" attrib="32854" fieldtype="System.UriComponents" value="134" />
              <field name="StrongPort" attrib="32854" fieldtype="System.UriComponents" value="128" />
              <field name="UserInfo" attrib="32854" fieldtype="System.UriComponents" value="2" />
            </fields>
          </class>
          <class name="UriFormat" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <fields>
              <field name="SafeUnescaped" attrib="32854" fieldtype="System.UriFormat" value="3" />
              <field name="Unescaped" attrib="32854" fieldtype="System.UriFormat" value="2" />
              <field name="UriEscaped" attrib="32854" fieldtype="System.UriFormat" value="1" />
            </fields>
          </class>
          <class name="UriFormatException" type="class" base="System.FormatException" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="textString" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="UriIdnScope" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <fields>
              <field name="All" attrib="32854" fieldtype="System.UriIdnScope" value="2" />
              <field name="AllExceptIntranet" attrib="32854" fieldtype="System.UriIdnScope" value="1" />
              <field name="None" attrib="32854" fieldtype="System.UriIdnScope" value="0" />
            </fields>
          </class>
          <class name="UriKind" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <fields>
              <field name="Absolute" attrib="32854" fieldtype="System.UriKind" value="1" />
              <field name="Relative" attrib="32854" fieldtype="System.UriKind" value="2" />
              <field name="RelativeOrAbsolute" attrib="32854" fieldtype="System.UriKind" value="0" />
            </fields>
          </class>
          <class name="UriParser" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="GetComponents(System.Uri, System.UriComponents, System.UriFormat)" attrib="452" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="components" position="1" attrib="0" type="System.UriComponents" />
                  <parameter name="format" position="2" attrib="0" type="System.UriFormat" />
                </parameters>
              </method>
              <method name="InitializeAndValidate(System.Uri, out System.UriFormatException&amp;)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="parsingError" position="1" attrib="2" type="System.UriFormatException&amp;" direction="out" />
                </parameters>
              </method>
              <method name="IsKnownScheme(System.String)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="schemeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="OnNewUri()" attrib="452" virtual="true" returntype="System.UriParser">
                <parameters />
              </method>
              <method name="OnRegister(System.String, System.Int32)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="schemeName" position="0" attrib="0" type="System.String" />
                  <parameter name="defaultPort" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Register(System.UriParser, System.String, System.Int32)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="uriParser" position="0" attrib="0" type="System.UriParser" />
                  <parameter name="schemeName" position="1" attrib="0" type="System.String" />
                  <parameter name="defaultPort" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Resolve(System.Uri, System.Uri, out System.UriFormatException&amp;)" attrib="452" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="baseUri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="relativeUri" position="1" attrib="0" type="System.Uri" />
                  <parameter name="parsingError" position="2" attrib="2" type="System.UriFormatException&amp;" direction="out" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Collections.Generic">
        <classes>
          <class name="LinkedList`1" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1&lt;T&gt;" />
              <interface name="System.Collections.Generic.IEnumerable`1&lt;T&gt;" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Collections.Generic.IEnumerable`1[T])" attrib="6278">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1&lt;T&gt;" />
                </parameters>
              </constructor>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32" params="">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="First" attrib="0" ptype="System.Collections.Generic.LinkedListNode`1&lt;T&gt;" params="">
                <methods>
                  <method name="get_First()" attrib="2182" returntype="System.Collections.Generic.LinkedListNode`1&lt;T&gt;">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Last" attrib="0" ptype="System.Collections.Generic.LinkedListNode`1&lt;T&gt;" params="">
                <methods>
                  <method name="get_Last()" attrib="2182" returntype="System.Collections.Generic.LinkedListNode`1&lt;T&gt;">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddAfter(System.Collections.Generic.LinkedListNode`1[T], System.Collections.Generic.LinkedListNode`1[T])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Collections.Generic.LinkedListNode`1&lt;T&gt;" />
                  <parameter name="newNode" position="1" attrib="0" type="System.Collections.Generic.LinkedListNode`1&lt;T&gt;" />
                </parameters>
              </method>
              <method name="AddAfter(System.Collections.Generic.LinkedListNode`1[T], T)" attrib="134" returntype="System.Collections.Generic.LinkedListNode`1&lt;T&gt;">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Collections.Generic.LinkedListNode`1&lt;T&gt;" />
                  <parameter name="value" position="1" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="AddBefore(System.Collections.Generic.LinkedListNode`1[T], System.Collections.Generic.LinkedListNode`1[T])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Collections.Generic.LinkedListNode`1&lt;T&gt;" />
                  <parameter name="newNode" position="1" attrib="0" type="System.Collections.Generic.LinkedListNode`1&lt;T&gt;" />
                </parameters>
              </method>
              <method name="AddBefore(System.Collections.Generic.LinkedListNode`1[T], T)" attrib="134" returntype="System.Collections.Generic.LinkedListNode`1&lt;T&gt;">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Collections.Generic.LinkedListNode`1&lt;T&gt;" />
                  <parameter name="value" position="1" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="AddFirst(System.Collections.Generic.LinkedListNode`1[T])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Collections.Generic.LinkedListNode`1&lt;T&gt;" />
                </parameters>
              </method>
              <method name="AddFirst(T)" attrib="134" returntype="System.Collections.Generic.LinkedListNode`1&lt;T&gt;">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="AddLast(System.Collections.Generic.LinkedListNode`1[T])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Collections.Generic.LinkedListNode`1&lt;T&gt;" />
                </parameters>
              </method>
              <method name="AddLast(T)" attrib="134" returntype="System.Collections.Generic.LinkedListNode`1&lt;T&gt;">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="Clear()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(T)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="CopyTo(T[], System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Find(T)" attrib="134" returntype="System.Collections.Generic.LinkedListNode`1&lt;T&gt;">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="FindLast(T)" attrib="134" returntype="System.Collections.Generic.LinkedListNode`1&lt;T&gt;">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Collections.Generic.LinkedList`1/Enumerator&lt;T&gt;">
                <parameters />
              </method>
              <method name="Remove(System.Collections.Generic.LinkedListNode`1[T])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Collections.Generic.LinkedListNode`1&lt;T&gt;" />
                </parameters>
              </method>
              <method name="Remove(T)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="RemoveFirst()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="RemoveLast()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
            <classes>
              <class name="Enumerator" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
                <interfaces>
                  <interface name="System.Collections.Generic.IEnumerator`1&lt;T&gt;" />
                  <interface name="System.IDisposable" />
                  <interface name="System.Collections.IEnumerator" />
                </interfaces>
                <properties>
                  <property name="Current" attrib="0" ptype="T" params="">
                    <methods>
                      <method name="get_Current()" attrib="2534" virtual="true" returntype="T">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                    <parameters />
                  </method>
                  <method name="MoveNext()" attrib="486" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </class>
            </classes>
          </class>
          <class name="LinkedListNode`1" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute" />
            </attributes>
            <constructors>
              <constructor name=".ctor(T)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="List" attrib="0" ptype="System.Collections.Generic.LinkedList`1&lt;T&gt;" params="">
                <methods>
                  <method name="get_List()" attrib="2182" returntype="System.Collections.Generic.LinkedList`1&lt;T&gt;">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Next" attrib="0" ptype="System.Collections.Generic.LinkedListNode`1&lt;T&gt;" params="">
                <methods>
                  <method name="get_Next()" attrib="2182" returntype="System.Collections.Generic.LinkedListNode`1&lt;T&gt;">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Previous" attrib="0" ptype="System.Collections.Generic.LinkedListNode`1&lt;T&gt;" params="">
                <methods>
                  <method name="get_Previous()" attrib="2182" returntype="System.Collections.Generic.LinkedListNode`1&lt;T&gt;">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Value" attrib="0" ptype="T" params="">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="T">
                    <parameters />
                  </method>
                  <method name="set_Value(T)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="T" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="Queue`1" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.IEnumerable`1&lt;T&gt;" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Collections.Generic.IEnumerable`1[T])" attrib="6278">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1&lt;T&gt;" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32" params="">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Clear()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(T)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="CopyTo(T[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                  <parameter name="arrayIndex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Dequeue()" attrib="134" returntype="T">
                <parameters />
              </method>
              <method name="Enqueue(T)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Collections.Generic.Queue`1/Enumerator&lt;T&gt;">
                <parameters />
              </method>
              <method name="Peek()" attrib="134" returntype="T">
                <parameters />
              </method>
              <method name="ToArray()" attrib="134" returntype="T[]">
                <parameters />
              </method>
              <method name="TrimExcess()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
            <classes>
              <class name="Enumerator" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
                <interfaces>
                  <interface name="System.Collections.Generic.IEnumerator`1&lt;T&gt;" />
                  <interface name="System.IDisposable" />
                  <interface name="System.Collections.IEnumerator" />
                </interfaces>
                <properties>
                  <property name="Current" attrib="0" ptype="T" params="">
                    <methods>
                      <method name="get_Current()" attrib="2534" virtual="true" returntype="T">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                    <parameters />
                  </method>
                  <method name="MoveNext()" attrib="486" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </class>
            </classes>
          </class>
          <class name="Stack`1" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.IEnumerable`1&lt;T&gt;" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Collections.Generic.IEnumerable`1[T])" attrib="6278">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1&lt;T&gt;" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32" params="">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Clear()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(T)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="CopyTo(T[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                  <parameter name="arrayIndex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Collections.Generic.Stack`1/Enumerator&lt;T&gt;">
                <parameters />
              </method>
              <method name="Peek()" attrib="134" returntype="T">
                <parameters />
              </method>
              <method name="Pop()" attrib="134" returntype="T">
                <parameters />
              </method>
              <method name="Push(T)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="ToArray()" attrib="134" returntype="T[]">
                <parameters />
              </method>
              <method name="TrimExcess()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
            <classes>
              <class name="Enumerator" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
                <interfaces>
                  <interface name="System.Collections.Generic.IEnumerator`1&lt;T&gt;" />
                  <interface name="System.IDisposable" />
                  <interface name="System.Collections.IEnumerator" />
                </interfaces>
                <properties>
                  <property name="Current" attrib="0" ptype="T" params="">
                    <methods>
                      <method name="get_Current()" attrib="2534" virtual="true" returntype="T">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                    <parameters />
                  </method>
                  <method name="MoveNext()" attrib="486" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </class>
            </classes>
          </class>
        </classes>
      </namespace>
      <namespace name="System.ComponentModel">
        <classes>
          <class name="CategoryAttribute" type="class" base="System.Attribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute" />
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="category" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Action" attrib="0" ptype="System.ComponentModel.CategoryAttribute" params="">
                <methods>
                  <method name="get_Action()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Appearance" attrib="0" ptype="System.ComponentModel.CategoryAttribute" params="">
                <methods>
                  <method name="get_Appearance()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Asynchronous" attrib="0" ptype="System.ComponentModel.CategoryAttribute" params="">
                <methods>
                  <method name="get_Asynchronous()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Behavior" attrib="0" ptype="System.ComponentModel.CategoryAttribute" params="">
                <methods>
                  <method name="get_Behavior()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Category" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Category()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Data" attrib="0" ptype="System.ComponentModel.CategoryAttribute" params="">
                <methods>
                  <method name="get_Data()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Default" attrib="0" ptype="System.ComponentModel.CategoryAttribute" params="">
                <methods>
                  <method name="get_Default()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Design" attrib="0" ptype="System.ComponentModel.CategoryAttribute" params="">
                <methods>
                  <method name="get_Design()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DragDrop" attrib="0" ptype="System.ComponentModel.CategoryAttribute" params="">
                <methods>
                  <method name="get_DragDrop()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Focus" attrib="0" ptype="System.ComponentModel.CategoryAttribute" params="">
                <methods>
                  <method name="get_Focus()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Format" attrib="0" ptype="System.ComponentModel.CategoryAttribute" params="">
                <methods>
                  <method name="get_Format()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Key" attrib="0" ptype="System.ComponentModel.CategoryAttribute" params="">
                <methods>
                  <method name="get_Key()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Layout" attrib="0" ptype="System.ComponentModel.CategoryAttribute" params="">
                <methods>
                  <method name="get_Layout()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Mouse" attrib="0" ptype="System.ComponentModel.CategoryAttribute" params="">
                <methods>
                  <method name="get_Mouse()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WindowStyle" attrib="0" ptype="System.ComponentModel.CategoryAttribute" params="">
                <methods>
                  <method name="get_WindowStyle()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="GetLocalizedString(System.String)" attrib="452" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DescriptionAttribute" type="class" base="System.Attribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute" />
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.DescriptionAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="description" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Description" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Description()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DescriptionValue" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_DescriptionValue()" attrib="2180" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_DescriptionValue(System.String)" attrib="2180" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Diagnostics">
        <classes>
          <class name="Debug" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="Assert(System.Boolean, System.String, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute" />
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="detailMessage" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Assert(System.Boolean, System.String, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute" />
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="detailMessageFormat" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Assert(System.Boolean)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute" />
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Assert(System.Boolean, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute" />
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLine(System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute" />
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="System.String" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="WriteLine(System.Object)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteLine(System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute" />
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Net">
        <classes>
          <class name="DecompressionMethods" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <fields>
              <field name="Deflate" attrib="32854" fieldtype="System.Net.DecompressionMethods" value="2" />
              <field name="GZip" attrib="32854" fieldtype="System.Net.DecompressionMethods" value="1" />
              <field name="None" attrib="32854" fieldtype="System.Net.DecompressionMethods" value="0" />
            </fields>
          </class>
          <class name="HttpRequestHeader" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <fields>
              <field name="Accept" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="20" />
              <field name="AcceptCharset" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="21" />
              <field name="AcceptEncoding" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="22" />
              <field name="AcceptLanguage" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="23" />
              <field name="Allow" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="10" />
              <field name="Authorization" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="24" />
              <field name="CacheControl" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="0" />
              <field name="Connection" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="1" />
              <field name="ContentEncoding" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="13" />
              <field name="ContentLanguage" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="14" />
              <field name="ContentLength" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="11" />
              <field name="ContentLocation" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="15" />
              <field name="ContentMd5" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="16" />
              <field name="ContentRange" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="17" />
              <field name="ContentType" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="12" />
              <field name="Cookie" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="25" />
              <field name="Date" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="2" />
              <field name="Expect" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="26" />
              <field name="Expires" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="18" />
              <field name="From" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="27" />
              <field name="Host" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="28" />
              <field name="IfMatch" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="29" />
              <field name="IfModifiedSince" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="30" />
              <field name="IfNoneMatch" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="31" />
              <field name="IfRange" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="32" />
              <field name="IfUnmodifiedSince" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="33" />
              <field name="KeepAlive" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="3" />
              <field name="LastModified" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="19" />
              <field name="MaxForwards" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="34" />
              <field name="Pragma" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="4" />
              <field name="ProxyAuthorization" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="35" />
              <field name="Range" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="37" />
              <field name="Referer" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="36" />
              <field name="Te" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="38" />
              <field name="Trailer" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="5" />
              <field name="TransferEncoding" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="6" />
              <field name="Translate" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="39" />
              <field name="Upgrade" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="7" />
              <field name="UserAgent" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="40" />
              <field name="Via" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="8" />
              <field name="Warning" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="9" />
            </fields>
          </class>
          <class name="HttpResponseHeader" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <fields>
              <field name="AcceptRanges" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="20" />
              <field name="Age" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="21" />
              <field name="Allow" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="10" />
              <field name="CacheControl" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="0" />
              <field name="Connection" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="1" />
              <field name="ContentEncoding" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="13" />
              <field name="ContentLanguage" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="14" />
              <field name="ContentLength" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="11" />
              <field name="ContentLocation" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="15" />
              <field name="ContentMd5" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="16" />
              <field name="ContentRange" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="17" />
              <field name="ContentType" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="12" />
              <field name="Date" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="2" />
              <field name="ETag" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="22" />
              <field name="Expires" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="18" />
              <field name="KeepAlive" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="3" />
              <field name="LastModified" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="19" />
              <field name="Location" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="23" />
              <field name="Pragma" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="4" />
              <field name="ProxyAuthenticate" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="24" />
              <field name="RetryAfter" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="25" />
              <field name="Server" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="26" />
              <field name="SetCookie" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="27" />
              <field name="Trailer" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="5" />
              <field name="TransferEncoding" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="6" />
              <field name="Upgrade" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="7" />
              <field name="Vary" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="28" />
              <field name="Via" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="8" />
              <field name="Warning" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="9" />
              <field name="WwwAuthenticate" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="29" />
            </fields>
          </class>
          <class name="HttpStatusCode" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <fields>
              <field name="Accepted" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="202" />
              <field name="Ambiguous" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="300" />
              <field name="BadGateway" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="502" />
              <field name="BadRequest" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="400" />
              <field name="Conflict" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="409" />
              <field name="Continue" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="100" />
              <field name="Created" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="201" />
              <field name="ExpectationFailed" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="417" />
              <field name="Forbidden" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="403" />
              <field name="Found" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="302" />
              <field name="GatewayTimeout" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="504" />
              <field name="Gone" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="410" />
              <field name="HttpVersionNotSupported" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="505" />
              <field name="InternalServerError" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="500" />
              <field name="LengthRequired" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="411" />
              <field name="MethodNotAllowed" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="405" />
              <field name="Moved" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="301" />
              <field name="MovedPermanently" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="301" />
              <field name="MultipleChoices" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="300" />
              <field name="NoContent" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="204" />
              <field name="NonAuthoritativeInformation" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="203" />
              <field name="NotAcceptable" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="406" />
              <field name="NotFound" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="404" />
              <field name="NotImplemented" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="501" />
              <field name="NotModified" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="304" />
              <field name="OK" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="200" />
              <field name="PartialContent" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="206" />
              <field name="PaymentRequired" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="402" />
              <field name="PreconditionFailed" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="412" />
              <field name="ProxyAuthenticationRequired" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="407" />
              <field name="Redirect" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="302" />
              <field name="RedirectKeepVerb" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="307" />
              <field name="RedirectMethod" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="303" />
              <field name="RequestedRangeNotSatisfiable" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="416" />
              <field name="RequestEntityTooLarge" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="413" />
              <field name="RequestTimeout" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="408" />
              <field name="RequestUriTooLong" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="414" />
              <field name="ResetContent" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="205" />
              <field name="SeeOther" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="303" />
              <field name="ServiceUnavailable" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="503" />
              <field name="SwitchingProtocols" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="101" />
              <field name="TemporaryRedirect" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="307" />
              <field name="Unauthorized" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="401" />
              <field name="UnsupportedMediaType" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="415" />
              <field name="Unused" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="306" />
              <field name="UseProxy" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="305" />
            </fields>
          </class>
          <class name="HttpWebRequest" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Uri)" attrib="6278">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Accept" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Accept()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Accept(System.String)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Address" attrib="0" ptype="System.Uri" params="">
                <methods>
                  <method name="get_Address()" attrib="3526" abstract="true" virtual="true" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="AllowAutoRedirect" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_AllowAutoRedirect()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_AllowAutoRedirect(System.Boolean)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="AllowWriteStreamBuffering" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_AllowWriteStreamBuffering()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_AllowWriteStreamBuffering(System.Boolean)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="AutomaticDecompression" attrib="0" ptype="System.Net.DecompressionMethods" params="">
                <methods>
                  <method name="get_AutomaticDecompression()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.DecompressionMethods">
                    <parameters />
                  </method>
                  <method name="set_AutomaticDecompression(System.Net.DecompressionMethods)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.DecompressionMethods" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Connection" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Connection()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Connection(System.String)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ContentLength" attrib="0" ptype="System.Int64" params="">
                <methods>
                  <method name="get_ContentLength()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_ContentLength(System.Int64)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ContentType" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_ContentType()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ContentType(System.String)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Expect" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Expect()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Expect(System.String)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="HaveResponse" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_HaveResponse()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Headers" attrib="0" ptype="System.Net.WebHeaderCollection" params="">
                <methods>
                  <method name="get_Headers()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.WebHeaderCollection">
                    <parameters />
                  </method>
                  <method name="set_Headers(System.Net.WebHeaderCollection)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.WebHeaderCollection" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="KeepAlive" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_KeepAlive()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_KeepAlive(System.Boolean)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MediaType" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_MediaType()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_MediaType(System.String)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Method" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Method()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Method(System.String)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Pipelined" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_Pipelined()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Pipelined(System.Boolean)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="PreAuthenticate" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_PreAuthenticate()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_PreAuthenticate(System.Boolean)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ProtocolVersion" attrib="0" ptype="System.Version" params="">
                <methods>
                  <method name="get_ProtocolVersion()" attrib="2502" virtual="true" returntype="System.Version">
                    <parameters />
                  </method>
                  <method name="set_ProtocolVersion(System.Version)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Version" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ReadWriteTimeout" attrib="0" ptype="System.Int32" params="">
                <methods>
                  <method name="get_ReadWriteTimeout()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_ReadWriteTimeout(System.Int32)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Referer" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Referer()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Referer(System.String)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RequestUri" attrib="0" ptype="System.Uri" params="">
                <methods>
                  <method name="get_RequestUri()" attrib="3526" abstract="true" virtual="true" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SendChunked" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_SendChunked()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_SendChunked(System.Boolean)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Timeout" attrib="0" ptype="System.Int32" params="">
                <methods>
                  <method name="get_Timeout()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Timeout(System.Int32)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="TransferEncoding" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_TransferEncoding()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_TransferEncoding(System.String)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UserAgent" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_UserAgent()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_UserAgent(System.String)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Abort()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="AddRange(System.Int32)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="range" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="AddRange(System.String, System.Int32)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="rangeSpecifier" position="0" attrib="0" type="System.String" />
                  <parameter name="range" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="AddRange(System.Int32, System.Int32)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="System.Int32" />
                  <parameter name="to" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="AddRange(System.String, System.Int32, System.Int32)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="rangeSpecifier" position="0" attrib="0" type="System.String" />
                  <parameter name="from" position="1" attrib="0" type="System.Int32" />
                  <parameter name="to" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="BeginGetRequestStream(System.AsyncCallback, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginGetResponse(System.AsyncCallback, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndGetRequestStream(System.IAsyncResult)" attrib="1478" abstract="true" virtual="true" returntype="System.IO.Stream">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndGetResponse(System.IAsyncResult)" attrib="1478" abstract="true" virtual="true" returntype="System.Net.HttpWebResponse">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="GetRequestStream()" attrib="1478" abstract="true" virtual="true" returntype="System.IO.Stream">
                <parameters />
              </method>
              <method name="GetResponse()" attrib="1478" abstract="true" virtual="true" returntype="System.Net.HttpWebResponse">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="HttpWebResponse" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="CharacterSet" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_CharacterSet()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ContentEncoding" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_ContentEncoding()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ContentLength" attrib="0" ptype="System.Int64" params="">
                <methods>
                  <method name="get_ContentLength()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ContentType" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_ContentType()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Headers" attrib="0" ptype="System.Net.WebHeaderCollection" params="">
                <methods>
                  <method name="get_Headers()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.WebHeaderCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LastModified" attrib="0" ptype="System.DateTime" params="">
                <methods>
                  <method name="get_LastModified()" attrib="3526" abstract="true" virtual="true" returntype="System.DateTime">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Method" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Method()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ProtocolVersion" attrib="0" ptype="System.Version" params="">
                <methods>
                  <method name="get_ProtocolVersion()" attrib="3526" abstract="true" virtual="true" returntype="System.Version">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ResponseUri" attrib="0" ptype="System.Uri" params="">
                <methods>
                  <method name="get_ResponseUri()" attrib="3526" abstract="true" virtual="true" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Server" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Server()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="StatusCode" attrib="0" ptype="System.Net.HttpStatusCode" params="">
                <methods>
                  <method name="get_StatusCode()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.HttpStatusCode">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="StatusDescription" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_StatusDescription()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Close()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="GetResponseHeader(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="headerName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetResponseStream()" attrib="1478" abstract="true" virtual="true" returntype="System.IO.Stream">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="WebException" type="class" base="System.InvalidOperationException" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String, System.Net.WebExceptionStatus)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="status" position="1" attrib="0" type="System.Net.WebExceptionStatus" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception, System.Net.WebExceptionStatus, System.Net.HttpWebResponse)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                  <parameter name="status" position="2" attrib="0" type="System.Net.WebExceptionStatus" />
                  <parameter name="response" position="3" attrib="0" type="System.Net.HttpWebResponse" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Response" attrib="0" ptype="System.Net.HttpWebResponse" params="">
                <methods>
                  <method name="get_Response()" attrib="2182" returntype="System.Net.HttpWebResponse">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Status" attrib="0" ptype="System.Net.WebExceptionStatus" params="">
                <methods>
                  <method name="get_Status()" attrib="2182" returntype="System.Net.WebExceptionStatus">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="WebExceptionStatus" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <fields>
              <field name="CacheEntryNotFound" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="18" />
              <field name="ConnectFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="2" />
              <field name="ConnectionClosed" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="8" />
              <field name="KeepAliveFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="12" />
              <field name="MessageLengthLimitExceeded" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="17" />
              <field name="NameResolutionFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="1" />
              <field name="Pending" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="13" />
              <field name="PipelineFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="5" />
              <field name="ProtocolError" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="7" />
              <field name="ProxyNameResolutionFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="15" />
              <field name="ReceiveFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="3" />
              <field name="RequestCanceled" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="6" />
              <field name="RequestProhibitedByCachePolicy" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="19" />
              <field name="RequestProhibitedByProxy" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="20" />
              <field name="SecureChannelFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="10" />
              <field name="SendFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="4" />
              <field name="ServerProtocolViolation" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="11" />
              <field name="Success" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="0" />
              <field name="Timeout" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="14" />
              <field name="TrustFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="9" />
              <field name="UnknownError" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="16" />
            </fields>
          </class>
          <class name="WebHeaderCollection" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute" />
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="headers" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32" params="">
                <methods>
                  <method name="get_Count()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Headers" attrib="0" ptype="System.Collections.Generic.ICollection`1&lt;System.String&gt;" params="">
                <methods>
                  <method name="get_Headers()" attrib="2182" returntype="System.Collections.Generic.ICollection`1&lt;System.String&gt;">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.String" params="System.String">
                <methods>
                  <method name="get_Item(System.String)" attrib="2182" returntype="System.String">
                    <parameters>
                      <parameter name="header" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.String, System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="header" position="0" attrib="0" type="System.String" />
                      <parameter name="value" position="1" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.String" params="System.Net.HttpResponseHeader">
                <methods>
                  <method name="get_Item(System.Net.HttpResponseHeader)" attrib="2182" returntype="System.String">
                    <parameters>
                      <parameter name="header" position="0" attrib="0" type="System.Net.HttpResponseHeader" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Net.HttpResponseHeader, System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="header" position="0" attrib="0" type="System.Net.HttpResponseHeader" />
                      <parameter name="value" position="1" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.String" params="System.Net.HttpRequestHeader">
                <methods>
                  <method name="get_Item(System.Net.HttpRequestHeader)" attrib="2182" returntype="System.String">
                    <parameters>
                      <parameter name="header" position="0" attrib="0" type="System.Net.HttpRequestHeader" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Net.HttpRequestHeader, System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="header" position="0" attrib="0" type="System.Net.HttpRequestHeader" />
                      <parameter name="value" position="1" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Text.RegularExpressions">
        <classes>
          <class name="Capture" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <properties>
              <property name="Index" attrib="0" ptype="System.Int32" params="">
                <methods>
                  <method name="get_Index()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Length" attrib="0" ptype="System.Int32" params="">
                <methods>
                  <method name="get_Length()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Value" attrib="0" ptype="System.String" params="">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ToString()" attrib="198" virtual="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="CaptureCollection" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32" params="">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSynchronized" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_IsSynchronized()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Text.RegularExpressions.Capture" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Text.RegularExpressions.Capture">
                    <parameters>
                      <parameter name="i" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SyncRoot" attrib="0" ptype="System.Object" params="">
                <methods>
                  <method name="get_SyncRoot()" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CopyTo(System.Array, System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Array" />
                  <parameter name="arrayIndex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.IEnumerator">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="Group" type="class" base="System.Text.RegularExpressions.Capture" charset="Ansi" layout="Auto">
            <properties>
              <property name="Captures" attrib="0" ptype="System.Text.RegularExpressions.CaptureCollection" params="">
                <methods>
                  <method name="get_Captures()" attrib="2182" returntype="System.Text.RegularExpressions.CaptureCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Success" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_Success()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Synchronized(System.Text.RegularExpressions.Group)" attrib="150" static="true" returntype="System.Text.RegularExpressions.Group">
                <parameters>
                  <parameter name="inner" position="0" attrib="0" type="System.Text.RegularExpressions.Group" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="GroupCollection" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32" params="">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSynchronized" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_IsSynchronized()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Text.RegularExpressions.Group" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Text.RegularExpressions.Group">
                    <parameters>
                      <parameter name="groupnum" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Text.RegularExpressions.Group" params="System.String">
                <methods>
                  <method name="get_Item(System.String)" attrib="2182" returntype="System.Text.RegularExpressions.Group">
                    <parameters>
                      <parameter name="groupname" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SyncRoot" attrib="0" ptype="System.Object" params="">
                <methods>
                  <method name="get_SyncRoot()" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CopyTo(System.Array, System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Array" />
                  <parameter name="arrayIndex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.IEnumerator">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="Match" type="class" base="System.Text.RegularExpressions.Group" charset="Ansi" layout="Auto">
            <properties>
              <property name="Empty" attrib="0" ptype="System.Text.RegularExpressions.Match" params="">
                <methods>
                  <method name="get_Empty()" attrib="2198" static="true" returntype="System.Text.RegularExpressions.Match">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Groups" attrib="0" ptype="System.Text.RegularExpressions.GroupCollection" params="">
                <methods>
                  <method name="get_Groups()" attrib="2502" virtual="true" returntype="System.Text.RegularExpressions.GroupCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="NextMatch()" attrib="134" returntype="System.Text.RegularExpressions.Match">
                <parameters />
              </method>
              <method name="Result(System.String)" attrib="454" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="replacement" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Synchronized(System.Text.RegularExpressions.Match)" attrib="150" static="true" returntype="System.Text.RegularExpressions.Match">
                <parameters>
                  <parameter name="inner" position="0" attrib="0" type="System.Text.RegularExpressions.Match" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MatchCollection" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32" params="">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSynchronized" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_IsSynchronized()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Text.RegularExpressions.Match" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2502" virtual="true" returntype="System.Text.RegularExpressions.Match">
                    <parameters>
                      <parameter name="i" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SyncRoot" attrib="0" ptype="System.Object" params="">
                <methods>
                  <method name="get_SyncRoot()" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CopyTo(System.Array, System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Array" />
                  <parameter name="arrayIndex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.IEnumerator">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="MatchEvaluator" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Text.RegularExpressions.Match, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Text.RegularExpressions.Match" />
                  <parameter name="callback" position="1" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Text.RegularExpressions.Match)" attrib="454" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Text.RegularExpressions.Match" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Regex" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="capnames" attrib="5" fieldtype="System.Collections.Hashtable" />
              <field name="caps" attrib="5" fieldtype="System.Collections.Hashtable" />
              <field name="capsize" attrib="5" fieldtype="System.Int32" />
              <field name="capslist" attrib="5" fieldtype="System.String[]" />
              <field name="pattern" attrib="5" fieldtype="System.String" />
              <field name="roptions" attrib="5" fieldtype="System.Text.RegularExpressions.RegexOptions" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.String, System.Text.RegularExpressions.RegexOptions)" attrib="6278">
                <parameters>
                  <parameter name="pattern" position="0" attrib="0" type="System.String" />
                  <parameter name="options" position="1" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="pattern" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="CacheSize" attrib="0" ptype="System.Int32" params="">
                <methods>
                  <method name="get_CacheSize()" attrib="2198" static="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_CacheSize(System.Int32)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Options" attrib="0" ptype="System.Text.RegularExpressions.RegexOptions" params="">
                <methods>
                  <method name="get_Options()" attrib="2182" returntype="System.Text.RegularExpressions.RegexOptions">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RightToLeft" attrib="0" ptype="System.Boolean" params="">
                <methods>
                  <method name="get_RightToLeft()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Escape(System.String)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="str" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetGroupNames()" attrib="134" returntype="System.String[]">
                <parameters />
              </method>
              <method name="GetGroupNumbers()" attrib="134" returntype="System.Int32[]">
                <parameters />
              </method>
              <method name="GroupNameFromNumber(System.Int32)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="i" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GroupNumberFromName(System.String)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="InitializeReferences()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
              <method name="IsMatch(System.String)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="IsMatch(System.String, System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="startat" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="IsMatch(System.String, System.String, System.Text.RegularExpressions.RegexOptions)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="options" position="2" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                </parameters>
              </method>
              <method name="IsMatch(System.String, System.String)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Match(System.String)" attrib="134" returntype="System.Text.RegularExpressions.Match">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Match(System.String, System.Int32)" attrib="134" returntype="System.Text.RegularExpressions.Match">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="startat" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Match(System.String, System.Int32, System.Int32)" attrib="134" returntype="System.Text.RegularExpressions.Match">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="beginning" position="1" attrib="0" type="System.Int32" />
                  <parameter name="length" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Match(System.String, System.String)" attrib="150" static="true" returntype="System.Text.RegularExpressions.Match">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Match(System.String, System.String, System.Text.RegularExpressions.RegexOptions)" attrib="150" static="true" returntype="System.Text.RegularExpressions.Match">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="options" position="2" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                </parameters>
              </method>
              <method name="Matches(System.String)" attrib="134" returntype="System.Text.RegularExpressions.MatchCollection">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Matches(System.String, System.Int32)" attrib="134" returntype="System.Text.RegularExpressions.MatchCollection">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="startat" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Matches(System.String, System.String, System.Text.RegularExpressions.RegexOptions)" attrib="150" static="true" returntype="System.Text.RegularExpressions.MatchCollection">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="options" position="2" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                </parameters>
              </method>
              <method name="Matches(System.String, System.String)" attrib="150" static="true" returntype="System.Text.RegularExpressions.MatchCollection">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.String, System.Text.RegularExpressions.MatchEvaluator, System.Text.RegularExpressions.RegexOptions)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="evaluator" position="2" attrib="0" type="System.Text.RegularExpressions.MatchEvaluator" />
                  <parameter name="options" position="3" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.String, System.Text.RegularExpressions.MatchEvaluator)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="evaluator" position="2" attrib="0" type="System.Text.RegularExpressions.MatchEvaluator" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.Text.RegularExpressions.MatchEvaluator)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="evaluator" position="1" attrib="0" type="System.Text.RegularExpressions.MatchEvaluator" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.Text.RegularExpressions.MatchEvaluator, System.Int32, System.Int32)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="evaluator" position="1" attrib="0" type="System.Text.RegularExpressions.MatchEvaluator" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="startat" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.Text.RegularExpressions.MatchEvaluator, System.Int32)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="evaluator" position="1" attrib="0" type="System.Text.RegularExpressions.MatchEvaluator" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.String, System.Int32, System.Int32)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="replacement" position="1" attrib="0" type="System.String" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="startat" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.String, System.String, System.Text.RegularExpressions.RegexOptions)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="replacement" position="2" attrib="0" type="System.String" />
                  <parameter name="options" position="3" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.String, System.String)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="replacement" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.String, System.Int32)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="replacement" position="1" attrib="0" type="System.String" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.String)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="replacement" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Split(System.String)" attrib="134" returntype="System.String[]">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Split(System.String, System.Int32)" attrib="134" returntype="System.String[]">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Split(System.String, System.Int32, System.Int32)" attrib="134" returntype="System.String[]">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                  <parameter name="startat" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Split(System.String, System.String)" attrib="150" static="true" returntype="System.String[]">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Split(System.String, System.String, System.Text.RegularExpressions.RegexOptions)" attrib="150" static="true" returntype="System.String[]">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="options" position="2" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" returntype="System.String">
                <parameters />
              </method>
              <method name="Unescape(System.String)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="str" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UseOptionR()" attrib="132" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="RegexOptions" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <fields>
              <field name="Compiled" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="8" />
              <field name="CultureInvariant" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="512" />
              <field name="ECMAScript" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="256" />
              <field name="ExplicitCapture" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="4" />
              <field name="IgnoreCase" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="1" />
              <field name="IgnorePatternWhitespace" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="32" />
              <field name="Multiline" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="2" />
              <field name="None" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="0" />
              <field name="RightToLeft" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="64" />
              <field name="Singleline" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="16" />
            </fields>
          </class>
          <class name="RegexRunner" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <fields>
              <field name="runcrawl" attrib="5" fieldtype="System.Int32[]" />
              <field name="runcrawlpos" attrib="5" fieldtype="System.Int32" />
              <field name="runmatch" attrib="5" fieldtype="System.Text.RegularExpressions.Match" />
              <field name="runregex" attrib="5" fieldtype="System.Text.RegularExpressions.Regex" />
              <field name="runstack" attrib="5" fieldtype="System.Int32[]" />
              <field name="runstackpos" attrib="5" fieldtype="System.Int32" />
              <field name="runtext" attrib="5" fieldtype="System.String" />
              <field name="runtextbeg" attrib="5" fieldtype="System.Int32" />
              <field name="runtextend" attrib="5" fieldtype="System.Int32" />
              <field name="runtextpos" attrib="5" fieldtype="System.Int32" />
              <field name="runtextstart" attrib="5" fieldtype="System.Int32" />
              <field name="runtrack" attrib="5" fieldtype="System.Int32[]" />
              <field name="runtrackcount" attrib="5" fieldtype="System.Int32" />
              <field name="runtrackpos" attrib="5" fieldtype="System.Int32" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6277">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Capture(System.Int32, System.Int32, System.Int32)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="capnum" position="0" attrib="0" type="System.Int32" />
                  <parameter name="start" position="1" attrib="0" type="System.Int32" />
                  <parameter name="end" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="CharInClass(System.Char, System.String)" attrib="148" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="ch" position="0" attrib="0" type="System.Char" />
                  <parameter name="charClass" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CharInSet(System.Char, System.String, System.String)" attrib="148" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="ch" position="0" attrib="0" type="System.Char" />
                  <parameter name="set" position="1" attrib="0" type="System.String" />
                  <parameter name="category" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Crawl(System.Int32)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="i" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Crawlpos()" attrib="132" returntype="System.Int32">
                <parameters />
              </method>
              <method name="DoubleCrawl()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
              <method name="DoubleStack()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
              <method name="DoubleTrack()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
              <method name="EnsureStorage()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
              <method name="FindFirstChar()" attrib="1476" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="Go()" attrib="1476" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="InitTrackCount()" attrib="1476" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="IsBoundary(System.Int32, System.Int32, System.Int32)" attrib="132" returntype="System.Boolean">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="startpos" position="1" attrib="0" type="System.Int32" />
                  <parameter name="endpos" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="IsECMABoundary(System.Int32, System.Int32, System.Int32)" attrib="132" returntype="System.Boolean">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="startpos" position="1" attrib="0" type="System.Int32" />
                  <parameter name="endpos" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="IsMatched(System.Int32)" attrib="132" returntype="System.Boolean">
                <parameters>
                  <parameter name="cap" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="MatchIndex(System.Int32)" attrib="132" returntype="System.Int32">
                <parameters>
                  <parameter name="cap" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="MatchLength(System.Int32)" attrib="132" returntype="System.Int32">
                <parameters>
                  <parameter name="cap" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Popcrawl()" attrib="132" returntype="System.Int32">
                <parameters />
              </method>
              <method name="Scan(System.Text.RegularExpressions.Regex, System.String, System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)" attrib="133" returntype="System.Text.RegularExpressions.Match">
                <parameters>
                  <parameter name="regex" position="0" attrib="0" type="System.Text.RegularExpressions.Regex" />
                  <parameter name="text" position="1" attrib="0" type="System.String" />
                  <parameter name="textbeg" position="2" attrib="0" type="System.Int32" />
                  <parameter name="textend" position="3" attrib="0" type="System.Int32" />
                  <parameter name="textstart" position="4" attrib="0" type="System.Int32" />
                  <parameter name="prevlen" position="5" attrib="0" type="System.Int32" />
                  <parameter name="quick" position="6" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="TransferCapture(System.Int32, System.Int32, System.Int32, System.Int32)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="capnum" position="0" attrib="0" type="System.Int32" />
                  <parameter name="uncapnum" position="1" attrib="0" type="System.Int32" />
                  <parameter name="start" position="2" attrib="0" type="System.Int32" />
                  <parameter name="end" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Uncapture()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
    </namespaces>
  </assembly>
</assemblies>